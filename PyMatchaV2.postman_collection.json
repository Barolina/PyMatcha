{
	"info": {
		"_postman_id": "bae09fd6-e733-4542-95ce-f4a813b3ee24",
		"name": "PyMatchaV2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "No JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ffa0b6b-7621-4d00-8cfe-7f84af738a5b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing json body.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Malformed JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3a0e3dd-b12a-4096-95eb-c06fc7cdf6bf",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The Json Body is malformed.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d5f06d0-6473-4b2c-962b-a9b2747cd3b2",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing keys ['username', 'first_name', 'last_name'].\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Too many keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4debbee6-606f-424d-a5b8-05f28418823e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"You can't specify key 'role'.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\",\n\t\"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "393a28ed-909b-432c-aa08-cf27ebe4c8fd",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"email = pm.collectionVariables.get(\"email\");",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Returned email is correct\"] = response.email == email"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"email\": \"{{email}}\",\n\t\"password\": \"{{password}}\",\n\t\"first_name\": \"{{first_name}}\",\n\t\"last_name\": \"{{last_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Email taken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bde6e2aa-94cf-406c-9bff-290cc6334ea6",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 409",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"ConflictError\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"email\": \"{{email}}\",\n\t\"password\": \"{{password}}\",\n\t\"first_name\": \"{{first_name}}\",\n\t\"last_name\": \"{{last_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Username taken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f512900e-d5df-48ea-a068-2f2b4dbe4a00",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 409",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"ConflictError\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"email\": \"another@email.org\",\n\t\"password\": \"{{password}}\",\n\t\"first_name\": \"{{first_name}}\",\n\t\"last_name\": \"{{last_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Confirm",
					"item": [
						{
							"name": "Login before confirmed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e69d924-0f6b-435b-87d4-aa8830fb5c09",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"JSON return code is 401\"] = response.code == 401",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User needs to be confirmed first.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a861af4-5ec9-4b9e-8424-0cb17867e0b7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User successfully confirmed.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm twice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7079140-0a13-46f8-a9bf-a1dcdb8d7928",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User already confirmed.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"{{email}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login incorrect email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc0f765a-5518-4ec8-9b7d-75e270cc6e2d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"JSON return code is 401\"] = response.code == 401",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Incorrect username or password.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"username\": \"{{email}}1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login incorrect password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8919e3c3-dcb9-4b72-b13d-11fa7241cb1b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"JSON return code is 401\"] = response.code == 401",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Incorrect username or password.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}1\",\n\t\"username\": \"{{email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login w/ username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7f490eb-6443-4f92-b56c-7a52e7c4b196",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
											"",
											"pm.collectionVariables.set(\"access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login w/ email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a9088b0-3a8a-4d53-a9c7-3985ac06d0d6",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
											"",
											"pm.collectionVariables.set(\"access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"username\": \"{{email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3392b7c-fe38-4bc7-936a-c17a34b046ce",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"pm.collectionVariables.set(\"access_token\", response.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/refresh",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4df1fa93-573e-4fbd-b380-a498d8e50a40",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Message is correct\"] = response.message == \"Logout successful.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\": \"{{access_token}}\",\n    \"refresh_token\": \"{{refresh_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh token after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c381ab79-e9e4-465a-8fe7-2cd9303a7d20",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"JSON return code is 401\"] = response.code == 401",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Token has been revoked.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/refresh",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login again after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61c4fdb6-ce13-4580-8b32-58383f36aff9",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
											"",
											"pm.collectionVariables.set(\"access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"username\": \"{{email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Complete",
					"item": [
						{
							"name": "Wrong orientation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a29437f-20bd-47e6-bb3a-f68a051e5972",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Orientation must be one of 'heterosexual', 'homosexual', 'bisexual', 'other'\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"qewrtery\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"06/04/1998\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bio too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41ded181-a4ff-488e-a025-7b0202ac2f21",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Bio is too short.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"Bonjour\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"{{birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not enough tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69c5d93e-3691-48df-9864-684d019d7d19",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"At least 3 tags are required.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"{{birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicated tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05155bfa-e0ca-47e5-b630-6f115a55b9f7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Duplicate tags.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"{{birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5667975f-d726-440b-b8d7-e8c8cc9817fb",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Gender must be one of 'male', 'female', 'other'\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"lol\",\n\t\"birthdate\": \"06/04/1998\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong birthdate format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "738f343b-08bf-49cf-b37b-636b833bf27d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Birthdate format must be %d/%m/%Y (day/month/year)\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"06 04 1998\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Too young",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c978bc0e-ea7a-4a39-8925-cbf301b686bc",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"You must be 18 years old or older.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"06/04/2020\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bde78f7-966b-4c0d-aa3f-0def59d183cb",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Profile completed !\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n        \"netflix\",\n        \"photography\",\n        \"swimming\",\n        \"comedy\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"{{birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete twice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7476694c-3366-40a3-bd1f-67dea7ec73a3",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The user has already completed his profile\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"{{birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login after complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e477b16-d89e-48a9-a3ce-6273000ae189",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 1",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"username\": \"{{email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after completed profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31069800-1938-4c53-a5ea-efdd39da915d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_email = pm.collectionVariables.get(\"email\");",
											"user_username = pm.collectionVariables.get(\"username\");",
											"user_orientation = pm.collectionVariables.get(\"orientation\");",
											"user_gender = pm.collectionVariables.get(\"gender\");",
											"user_bio = pm.collectionVariables.get(\"bio\");",
											"first_name = pm.collectionVariables.get(\"first_name\");",
											"last_name = pm.collectionVariables.get(\"last_name\");",
											"",
											"",
											"tests[\"Is email correct\"] = response.email == user_email",
											"tests[\"Is username correct\"] = response.username == user_username",
											"tests[\"User orientation is correct\"] = response.orientation == user_orientation",
											"tests[\"User gender is correct\"] = response.gender == user_gender",
											"tests[\"User bio is correct\"] = response.bio == user_bio",
											"tests[\"No images in profile\"] = response.images.length == 0",
											"tests[\"User is confirmed\"] = response.is_confirmed = 1",
											"tests[\"User is online\"] = response.is_online = 1",
											"tests[\"User is completed\"] = response.is_profile_completed = 1",
											"tests[\"First name is correct\"] = response.first_name = first_name",
											"tests[\"Last name is correct\"] = response.last_name = last_name",
											"tests[\"Superlikes count is 5\"] = response.superlikes_counter = 5",
											"tests[\"Tags length is 4\"] = response.tags.length == 4",
											"",
											"pm.collectionVariables.set(\"id\", response.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Edit",
					"item": [
						{
							"name": "Edit first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1759400d-2720-4df0-bd1d-b164af3251a4",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"First name successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"first_name\": \"{{first_name2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/first_name",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"first_name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0713f87-8adb-4541-bea2-1bb7d0de7f68",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"first_name2 = pm.collectionVariables.get(\"first_name2\");",
											"",
											"tests[\"Is first name correct\"] = response.first_name == first_name2",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit last name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d7063cd-d54e-4c6f-92b2-1495d0ea76b6",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Last name successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"last_name\": \"{{last_name2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/last_name",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"last_name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited last name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "048c8526-f7f7-43f3-a944-5340d1cfb2a3",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"last_name2 = pm.collectionVariables.get(\"last_name2\");",
											"",
											"tests[\"Is last name correct\"] = response.last_name == last_name2",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit username TAKEN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3ba5eff-a98e-4ae6-abc6-43cb77ec404b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Username taken.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/username",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"username"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a56e377-3bbf-4aae-91c6-3d04213b30d1",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Username successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/username",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"username"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca092d7d-7c8b-4435-a8d7-f392320ee25e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"username2 = pm.collectionVariables.get(\"username2\");",
											"",
											"tests[\"Is username correct\"] = response.username == username2",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit bio too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24bc9c2d-c260-4be6-8d22-ac1fb3a56a80",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Bio is too short.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bio\": \"AWSRYHRYKlki\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/bio",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"bio"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit bio",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16e53f1a-e6cd-4980-aba1-c2793383cf96",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Bio successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bio\": \"{{bio2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/bio",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"bio"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited bio",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1c262b2-e347-4bd8-be1f-39a81f06bcc1",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"bio2 = pm.collectionVariables.get(\"bio2\");",
											"",
											"tests[\"Is bio correct\"] = response.bio == bio2",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit gender wrong",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4aa2fefc-b449-40a5-8396-1cdc9a6d2d05",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Gender must be male, female or other.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gender\": \"AWSRYHRYKlki\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/gender",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"gender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2c9dc55-ebb3-4aee-bbb0-e9aa5656b70e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Gender successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gender\": \"{{gender2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/gender",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"gender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2d0dbc6-ab7d-48ad-b57b-291ba9aaade6",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"gender2 = pm.collectionVariables.get(\"gender2\");",
											"",
											"tests[\"Is gender correct\"] = response.gender == gender2",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit orientation wrong",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9b1c187-14bd-40bf-8ec7-0334c76d5ca2",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Orientation must be heterosexual, homosexual, bisexual or other.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orientation\": \"AWSRYHRYKlki\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/orientation",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"orientation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit orientation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "594eff93-0733-4f95-95b3-90c3ba3a2954",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Orientation successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orientation\": \"{{orientation2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/orientation",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"orientation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited orientation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0181da0f-5bf6-48a7-b906-238dbb254681",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"orientation2 = pm.collectionVariables.get(\"orientation2\");",
											"",
											"tests[\"Is orientation correct\"] = response.orientation == orientation2",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit birthdate wrong",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d1b75e8-fb71-40ba-9f43-f508e604dd10",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Birthdate format must be %d/%m/%Y (day/month/year).\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"birthdate\": \"AWSRYHRYKlki\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/birthdate",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"birthdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit birthdate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "722b8429-9a34-43d6-ba26-7c7c24681b1e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Birthdate successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"birthdate\": \"{{birthdate2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/birthdate",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"birthdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited birthdate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27076791-5e9d-439d-90d5-81904f4e00e7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Is birthdate correct\"] = response.birthdate == \"Sun, 25 Jun 2000 00:00:00 GMT\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edce131f-2e87-440b-a670-5885cf6c57b5",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Tags successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tags\": [\n        \"swimming\",\n        \"netflix\",\n        \"art\",\n        \"diy\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/tags",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ce6fb07-85cc-4031-bfaa-151e17e82003",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"Tag #1 is correct\"] = response.tags[0].name == \"swimming\"",
											"tests[\"Tag #2 is correct\"] = response.tags[1].name == \"netflix\"",
											"tests[\"Tag #3 is correct\"] = response.tags[2].name == \"art\"",
											"tests[\"Tag #4 is correct\"] = response.tags[3].name == \"diy\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ee56da7-2bc7-4c33-a2e5-a7d0505ca0ab",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Email sent for new email\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{email2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/email",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe614eda-0f6a-441e-ba4a-ea0426cb39b7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"email2 = pm.collectionVariables.get(\"email2\");",
											"",
											"tests[\"Is email correct\"] = response.email == email2",
											"tests[\"Is confirmed == 0\"] = response.is_confirmed == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm user after email edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af0ae0e6-f63b-4813-b5e0-9400c36b4bd0",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User successfully confirmed.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/{{email2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"{{email2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after email edit and confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5aa3043e-3f2b-4333-a90a-f82063bf9afd",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"email2 = pm.collectionVariables.get(\"email2\");",
											"",
											"",
											"tests[\"Is email correct\"] = response.email == email2",
											"tests[\"Is confirmed == 0\"] = response.is_confirmed == 1"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit email with same email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "904a610b-63e0-4af2-b24b-b9557467d199",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The new email is the same as the old one !\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{email2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/email",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3c02cee-7278-4d2c-9726-8b1f37aff66a",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User password successfully updated.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"old_password\": \"{{password}}\",\n\t\"new_password\": \"{{password2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/password",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user after password edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed31d440-d163-4917-bfb3-83e2b85c3f93",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 1\"] = response.return.is_profile_completed == 1",
											"",
											"pm.collectionVariables.set(\"access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password2}}\",\n\t\"username\": \"{{email2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit geolocation with ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fc9f0a9-fc2b-43fe-b167-07f2d8b15539",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"New location sucessfully saved.\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ip\": \"{{ip}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/geolocation",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"geolocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after ip geoloc edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe934a48-e836-4020-9a7f-679d55a2d22b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Is geohash correct\"] = response.geohash == \"u0bc2bxyswj9\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit geolocation with lat lng",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3724a5e6-42b8-404d-ae26-9fe7f04dd1e4",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"New location sucessfully saved.\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ip\": \"{{ip}}\",\n\t\"lat\": {{lat}},\n\t\"lng\": {{lng}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/geolocation",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"geolocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after lat lng edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be9af427-fbb5-4a55-accf-df55ff9b83da",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Is geohash correct\"] = response.geohash == \"u0bcg01kq09g\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email2}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "View",
					"item": [
						{
							"name": "Viewed me",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54da457d-74fb-4efb-8649-d88b8ec32b5f",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Viewed me list is empty\"] = response.viewed_me.length == 0",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/history/viewed/me",
									"host": [
										"{{host}}"
									],
									"path": [
										"history",
										"viewed",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Viewed profiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0b8a9ec-6ea3-4930-bb9e-e70a1dd7621d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Viewed list is empty\"] = response.viewed.length == 0",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/history/viewed",
									"host": [
										"{{host}}"
									],
									"path": [
										"history",
										"viewed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unknown user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e92ddcae-c1ec-40c9-8530-234c3769eaa7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User -1 not found.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/view/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"view",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Yourself",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cd46e01-f3db-4aca-b817-be229cdfc747",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Cannot view yourself.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/view/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"view",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Someone's profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f895895-db7c-427b-b2fd-09a7ccccf7b1",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Profile's usernam is correct\"] = respons.profile.username == \"lazylion445\"",
											"tests[\"Returned profile id is correct\"] = response.profile.id == 500"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/view/500",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"view",
										"500"
									]
								}
							},
							"response": []
						},
						{
							"name": "Viewed profiles after viewing someone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03c0d267-fd39-4a7b-b186-380c0da2a000",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Viewed list is empty\"] = response.viewed.length == 1",
											"tests[\"Viewed n1 is correct\"] = response.viewed[0].id == 500"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/history/viewed",
									"host": [
										"{{host}}"
									],
									"path": [
										"history",
										"viewed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create random views",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2797ea16-a28a-4556-97f2-e0567e6ab328",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45437f7b-a193-45d4-bb71-4c94938ebc22",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "xX69jules69Xx"
									}
								],
								"url": {
									"raw": "{{host}}/debug/views/10",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"views",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Viewed me after random views",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f825bee1-cede-48e5-ba81-f3efeeae7773",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Viewed me list is empty\"] = response.viewed_me.length == 10",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/history/viewed/me",
									"host": [
										"{{host}}"
									],
									"path": [
										"history",
										"viewed",
										"me"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Report",
					"item": [
						{
							"name": "Get your profile no reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86f4a1f7-e072-46ff-8533-42acc89f09bd",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Reports sent length is 1\"] = response.reports.sent.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unknown user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d50fe250-35fd-4939-84bc-e317a4c3c4b7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User -1 not found.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reason\": \"a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Yourself",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c1db00f-1372-4c82-8531-8659fd82c101",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Cannot report yourself.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reason\": \"a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong reason",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62fe33b6-e1f9-464b-a21d-6c19ebe785ab",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Reason must be 'harassment', 'bot', 'spam' or 'inappropriate content'.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reason\": \"a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/500",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"500"
									]
								}
							},
							"response": []
						},
						{
							"name": "User 500",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ab6e11b-5a69-479b-bd1f-db3cc6c50ff5",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reason\": \"spam\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/500",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"500"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get your profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edb7fca3-6dd2-470e-b56c-477ac637633b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_id = pm.collectionVariables.get(\"id\");",
											"",
											"tests[\"Reports sent length is 1\"] = response.reports.sent.length == 1",
											"tests[\"Reported id is correct\"] = response.reports.sent[0].reported_id == 500",
											"tests[\"Reporter id is correct\"] = response.reports.sent[0].reporter_id == user_id",
											"tests[\"Report reason is correct\"] = response.reports.sent[0].reason == \"spam\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug report user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d801f78e-c83c-46d9-bc74-016368caf097",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reported_id\": {{id}},\n\t\"reporter_id\": 500,\n\t\"reason\": \"spam\",\n    \"details\": \"AAA\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/debug/report",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get your profile after report",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2f3c1e9-c86d-44a3-93cc-9fbb700034e3",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_id = pm.collectionVariables.get(\"id\");",
											"",
											"tests[\"Reports received length is 1\"] = response.reports.received.length == 1",
											"tests[\"Reported id is correct\"] = response.reports.received[0].reported_id == user_id",
											"tests[\"Reporter id is correct\"] = response.reports.received[0].reporter_id == 500",
											"tests[\"Report reason is correct\"] = response.reports.received[0].reason == \"spam\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Recommendations",
			"item": [
				{
					"name": "Calc recommendations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "894a8b37-b908-4168-8fb1-b7e50e646311",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"",
									"tests[\"Recommendations length is correct\"] = response.recommendations.length > 10",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/recommendations",
							"host": [
								"{{host}}"
							],
							"path": [
								"recommendations"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8f07f18d-a335-41f7-90e6-5a2ffecb6b2f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b3c7aec0-7948-4f20-bbce-883fb16b369c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "fdc04fff-2ccc-403e-9369-1f3d9ca6d462",
			"key": "host",
			"value": "http://127.0.0.1:5000"
		},
		{
			"id": "6eeec8f4-858e-4e0a-bbf1-ef8a743923e9",
			"key": "access_token",
			"value": ""
		},
		{
			"id": "4dd1314c-af39-4289-b465-09efc0fd9b96",
			"key": "refresh_token",
			"value": ""
		},
		{
			"id": "1f7f5d27-1eba-48f9-bb21-73c58d112d11",
			"key": "debug_token",
			"value": "xX69jules69Xx"
		},
		{
			"id": "3dbc6491-d534-414b-9b83-189167234960",
			"key": "id",
			"value": ""
		},
		{
			"id": "6063c9c8-8b99-42c7-b7b6-5939d3c18430",
			"key": "first_name",
			"value": "Jules"
		},
		{
			"id": "8d0cb910-5d12-4f35-9910-3c6c3d57e443",
			"key": "last_name",
			"value": "Lasne"
		},
		{
			"id": "db0f9c24-2123-461f-bfa7-d08848551262",
			"key": "email",
			"value": "jules.lasne@example.org"
		},
		{
			"id": "414b1707-a364-4088-a979-855822afee67",
			"key": "username",
			"value": "seluj78"
		},
		{
			"id": "d67fb0bf-f6e4-4b35-8470-69fca442aaff",
			"key": "password",
			"value": "dolphin"
		},
		{
			"id": "75c9b7f9-1e3f-4b4e-9b04-00a6e67b1b9b",
			"key": "orientation",
			"value": "heterosexual"
		},
		{
			"id": "0ccf3d47-3a30-4bee-9166-6ceb7c0e16c9",
			"key": "gender",
			"value": "male"
		},
		{
			"id": "dd0c44a6-5d08-4a56-8722-3aac0ed1a863",
			"key": "bio",
			"value": "Phasellus vel tortor vel elit scelerisque accumsan vel nec nunc. Ut condimentum vestibulum sapien non dictum. Vestibulum ac eleifend mi. Curabitur dictum vestibulum ex at placerat. Pellentesque odio mi, condimentum et sollicitudin at, finibus non leo. Aenean sed pulvinar nulla, nec tincidunt felis. Aenean nibh elit, aliquam sit amet lobortis et, pellentesque ut orci. Curabitur placerat sem id ex laoreet imperdiet. Curabitur dictum ac urna feugiat viverra. Vivamus nec pulvinar urna. Suspendisse vel ultrices est. Sed malesuada est vel orci venenatis scelerisque. Phasellus ultrices dignissim sapien, at mattis tellus mattis pulvinar. Sed ut euismod velit, id fermentum leo."
		},
		{
			"id": "31b397b1-790c-4774-9f65-70652b07ad48",
			"key": "birthdate",
			"value": "06/04/1998"
		},
		{
			"id": "9bf4b9f9-653a-4284-837c-058ad6f7e286",
			"key": "first_name2",
			"value": "Félix"
		},
		{
			"id": "31d7457b-53aa-4306-a264-0bf221895d8a",
			"key": "last_name2",
			"value": "Ensal"
		},
		{
			"id": "ac213197-7a51-4808-a2e9-01a69a90081b",
			"key": "username2",
			"value": "Ufree"
		},
		{
			"id": "8f4c43aa-6f29-4044-954e-4cd4ae173f39",
			"key": "bio2",
			"value": "Donec quis porttitor ante, ac pulvinar nulla. Vivamus dignissim, ipsum ultricies interdum suscipit, risus tellus auctor mi, eu auctor metus sem quis urna. In maximus placerat ipsum, nec sodales elit aliquet sed. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Phasellus malesuada velit felis, non volutpat ex bibendum at. Maecenas aliquet sodales quam at consequat. Sed faucibus consequat tempor. Fusce consequat eu sem non tempus. Duis dapibus nunc vel tempus semper. Pellentesque dignissim tellus odio, vel luctus ipsum suscipit quis. Curabitur id erat at quam varius fermentum non in massa."
		},
		{
			"id": "c53e4a8d-d0d3-408e-9381-ad804567cb4f",
			"key": "gender2",
			"value": "other"
		},
		{
			"id": "30c4d468-5b81-4bef-856a-005e9bf9ef8b",
			"key": "orientation2",
			"value": "bisexual"
		},
		{
			"id": "6d479be2-6f0e-4d46-994c-bb6959c427f8",
			"key": "birthdate2",
			"value": "25/06/2000"
		},
		{
			"id": "40f5f460-aef2-46d6-9304-3588ddef7bd9",
			"key": "email2",
			"value": "felix.ensal@example.org"
		},
		{
			"id": "43715781-fd0d-4aaa-ab05-aec1cb3712ab",
			"key": "password2",
			"value": "dolphin2"
		},
		{
			"id": "c9fed102-8d1c-4a02-ba31-3a31c44429a0",
			"key": "ip",
			"value": "90.108.46.63"
		},
		{
			"id": "fc2f46d1-7d82-4227-8bea-c14e0b33dbbc",
			"key": "lat",
			"value": "49.5271"
		},
		{
			"id": "f30ed5c5-e07a-428d-a433-d8d709b18adf",
			"key": "lng",
			"value": "1.1885"
		}
	],
	"protocolProfileBehavior": {}
}
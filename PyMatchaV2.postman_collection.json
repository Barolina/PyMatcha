{
	"info": {
		"_postman_id": "bae09fd6-e733-4542-95ce-f4a813b3ee24",
		"name": "PyMatchaV2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "No JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ffa0b6b-7621-4d00-8cfe-7f84af738a5b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing json body.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Malformed JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3a0e3dd-b12a-4096-95eb-c06fc7cdf6bf",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The Json Body is malformed.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d5f06d0-6473-4b2c-962b-a9b2747cd3b2",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing keys ['username', 'first_name', 'last_name'].\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Too many keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4debbee6-606f-424d-a5b8-05f28418823e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"You can't specify key 'role'.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\",\n\t\"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "393a28ed-909b-432c-aa08-cf27ebe4c8fd",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"email = pm.collectionVariables.get(\"email\");",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Returned email is correct\"] = response.email == email"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"email\": \"{{email}}\",\n\t\"password\": \"{{password}}\",\n\t\"first_name\": \"{{first_name}}\",\n\t\"last_name\": \"{{last_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Email taken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bde6e2aa-94cf-406c-9bff-290cc6334ea6",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 409",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"ConflictError\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"email\": \"{{email}}\",\n\t\"password\": \"{{password}}\",\n\t\"first_name\": \"{{first_name}}\",\n\t\"last_name\": \"{{last_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Username taken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f512900e-d5df-48ea-a068-2f2b4dbe4a00",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 409",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"ConflictError\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"email\": \"another@email.org\",\n\t\"password\": \"{{password}}\",\n\t\"first_name\": \"{{first_name}}\",\n\t\"last_name\": \"{{last_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Confirm",
					"item": [
						{
							"name": "Login before confirmed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e69d924-0f6b-435b-87d4-aa8830fb5c09",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"JSON return code is 401\"] = response.code == 401",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User needs to be confirmed first.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a861af4-5ec9-4b9e-8424-0cb17867e0b7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User successfully confirmed.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm twice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7079140-0a13-46f8-a9bf-a1dcdb8d7928",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User already confirmed.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"{{email}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login incorrect email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc0f765a-5518-4ec8-9b7d-75e270cc6e2d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"JSON return code is 401\"] = response.code == 401",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Incorrect username or password.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"username\": \"{{email}}1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login incorrect password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8919e3c3-dcb9-4b72-b13d-11fa7241cb1b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"JSON return code is 401\"] = response.code == 401",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Incorrect username or password.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}1\",\n\t\"username\": \"{{email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login w/ username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7f490eb-6443-4f92-b56c-7a52e7c4b196",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
											"",
											"pm.collectionVariables.set(\"access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login w/ email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a9088b0-3a8a-4d53-a9c7-3985ac06d0d6",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
											"",
											"pm.collectionVariables.set(\"access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"username\": \"{{email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3392b7c-fe38-4bc7-936a-c17a34b046ce",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"pm.collectionVariables.set(\"access_token\", response.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/refresh",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4df1fa93-573e-4fbd-b380-a498d8e50a40",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Message is correct\"] = response.message == \"Logout successful.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\": \"{{access_token}}\",\n    \"refresh_token\": \"{{refresh_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh token after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c381ab79-e9e4-465a-8fe7-2cd9303a7d20",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"JSON return code is 401\"] = response.code == 401",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Token has been revoked.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/refresh",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login again after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61c4fdb6-ce13-4580-8b32-58383f36aff9",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
											"",
											"pm.collectionVariables.set(\"access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"username\": \"{{email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get id after login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "497921d2-c03f-42c8-8d81-efaa52e23f9d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"id\", response.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Complete",
					"item": [
						{
							"name": "Wrong orientation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a29437f-20bd-47e6-bb3a-f68a051e5972",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Orientation must be one of 'heterosexual', 'homosexual', 'bisexual', 'other'\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"qewrtery\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"06/04/1998\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bio too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41ded181-a4ff-488e-a025-7b0202ac2f21",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Bio is too short.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"Bonjour\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"{{birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not enough tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69c5d93e-3691-48df-9864-684d019d7d19",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"At least 3 tags are required.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"{{birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicated tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05155bfa-e0ca-47e5-b630-6f115a55b9f7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Duplicate tags.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"{{birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5667975f-d726-440b-b8d7-e8c8cc9817fb",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Gender must be one of 'male', 'female', 'other'\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"lol\",\n\t\"birthdate\": \"06/04/1998\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong birthdate format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "738f343b-08bf-49cf-b37b-636b833bf27d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Birthdate format must be %d/%m/%Y (day/month/year)\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"06 04 1998\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Too young",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c978bc0e-ea7a-4a39-8925-cbf301b686bc",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"You must be 18 years old or older.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"06/04/2020\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bde78f7-966b-4c0d-aa3f-0def59d183cb",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Profile completed !\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n        \"netflix\",\n        \"photography\",\n        \"swimming\",\n        \"comedy\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"{{birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete twice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7476694c-3366-40a3-bd1f-67dea7ec73a3",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The user has already completed his profile\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{orientation}}\",\n\t\"bio\": \"{{bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{gender}}\",\n\t\"birthdate\": \"{{birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login after complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e477b16-d89e-48a9-a3ce-6273000ae189",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 1",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"username\": \"{{email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after completed profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31069800-1938-4c53-a5ea-efdd39da915d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_email = pm.collectionVariables.get(\"email\");",
											"user_username = pm.collectionVariables.get(\"username\");",
											"user_orientation = pm.collectionVariables.get(\"orientation\");",
											"user_gender = pm.collectionVariables.get(\"gender\");",
											"user_bio = pm.collectionVariables.get(\"bio\");",
											"first_name = pm.collectionVariables.get(\"first_name\");",
											"last_name = pm.collectionVariables.get(\"last_name\");",
											"",
											"",
											"tests[\"Is email correct\"] = response.email == user_email",
											"tests[\"Is username correct\"] = response.username == user_username",
											"tests[\"User orientation is correct\"] = response.orientation == user_orientation",
											"tests[\"User gender is correct\"] = response.gender == user_gender",
											"tests[\"User bio is correct\"] = response.bio == user_bio",
											"tests[\"No images in profile\"] = response.images.length == 0",
											"tests[\"User is confirmed\"] = response.is_confirmed = 1",
											"tests[\"User is online\"] = response.is_online = 1",
											"tests[\"User is completed\"] = response.is_profile_completed = 1",
											"tests[\"First name is correct\"] = response.first_name = first_name",
											"tests[\"Last name is correct\"] = response.last_name = last_name",
											"tests[\"Superlikes count is 5\"] = response.superlikes_counter = 5",
											"// tests[\"Tags length is 4\"] = response.tags.length == 4",
											"",
											"pm.collectionVariables.set(\"id\", response.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Edit",
					"item": [
						{
							"name": "Edit first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1759400d-2720-4df0-bd1d-b164af3251a4",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"First name successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"first_name\": \"{{first_name2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/first_name",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"first_name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0713f87-8adb-4541-bea2-1bb7d0de7f68",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"first_name2 = pm.collectionVariables.get(\"first_name2\");",
											"",
											"tests[\"Is first name correct\"] = response.first_name == first_name2",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit last name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d7063cd-d54e-4c6f-92b2-1495d0ea76b6",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Last name successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"last_name\": \"{{last_name2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/last_name",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"last_name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited last name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "048c8526-f7f7-43f3-a944-5340d1cfb2a3",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"last_name2 = pm.collectionVariables.get(\"last_name2\");",
											"",
											"tests[\"Is last name correct\"] = response.last_name == last_name2",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit username TAKEN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3ba5eff-a98e-4ae6-abc6-43cb77ec404b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Username taken.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/username",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"username"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a56e377-3bbf-4aae-91c6-3d04213b30d1",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Username successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/username",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"username"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca092d7d-7c8b-4435-a8d7-f392320ee25e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"username2 = pm.collectionVariables.get(\"username2\");",
											"",
											"tests[\"Is username correct\"] = response.username == username2",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit bio too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24bc9c2d-c260-4be6-8d22-ac1fb3a56a80",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Bio is too short.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bio\": \"AWSRYHRYKlki\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/bio",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"bio"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit bio",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16e53f1a-e6cd-4980-aba1-c2793383cf96",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Bio successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bio\": \"{{bio2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/bio",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"bio"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited bio",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1c262b2-e347-4bd8-be1f-39a81f06bcc1",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"bio2 = pm.collectionVariables.get(\"bio2\");",
											"",
											"tests[\"Is bio correct\"] = response.bio == bio2",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit gender wrong",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4aa2fefc-b449-40a5-8396-1cdc9a6d2d05",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Gender must be male, female or other.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gender\": \"AWSRYHRYKlki\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/gender",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"gender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2c9dc55-ebb3-4aee-bbb0-e9aa5656b70e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Gender successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gender\": \"{{gender2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/gender",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"gender"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2d0dbc6-ab7d-48ad-b57b-291ba9aaade6",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"gender2 = pm.collectionVariables.get(\"gender2\");",
											"",
											"tests[\"Is gender correct\"] = response.gender == gender2",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit orientation wrong",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9b1c187-14bd-40bf-8ec7-0334c76d5ca2",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Orientation must be heterosexual, homosexual, bisexual or other.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orientation\": \"AWSRYHRYKlki\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/orientation",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"orientation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit orientation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "594eff93-0733-4f95-95b3-90c3ba3a2954",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Orientation successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orientation\": \"{{orientation2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/orientation",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"orientation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited orientation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0181da0f-5bf6-48a7-b906-238dbb254681",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"orientation2 = pm.collectionVariables.get(\"orientation2\");",
											"",
											"tests[\"Is orientation correct\"] = response.orientation == orientation2",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit birthdate wrong",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d1b75e8-fb71-40ba-9f43-f508e604dd10",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Birthdate format must be %d/%m/%Y (day/month/year).\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"birthdate\": \"AWSRYHRYKlki\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/birthdate",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"birthdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit birthdate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "722b8429-9a34-43d6-ba26-7c7c24681b1e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Birthdate successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"birthdate\": \"{{birthdate2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/birthdate",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"birthdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited birthdate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27076791-5e9d-439d-90d5-81904f4e00e7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Is birthdate correct\"] = response.birthdate == \"Sun, 25 Jun 2000 00:00:00 GMT\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edce131f-2e87-440b-a670-5885cf6c57b5",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Tags successfully modified!\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tags\": [\n        \"swimming\",\n        \"netflix\",\n        \"art\",\n        \"diy\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/tags",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ce6fb07-85cc-4031-bfaa-151e17e82003",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"Tag #1 is correct\"] = response.tags[0].name == \"swimming\"",
											"tests[\"Tag #2 is correct\"] = response.tags[1].name == \"netflix\"",
											"tests[\"Tag #3 is correct\"] = response.tags[2].name == \"art\"",
											"tests[\"Tag #4 is correct\"] = response.tags[3].name == \"diy\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ee56da7-2bc7-4c33-a2e5-a7d0505ca0ab",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Email sent for new email\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{email2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/email",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe614eda-0f6a-441e-ba4a-ea0426cb39b7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"email2 = pm.collectionVariables.get(\"email2\");",
											"",
											"tests[\"Is email correct\"] = response.email == email2",
											"tests[\"Is confirmed == 0\"] = response.is_confirmed == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm user after email edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af0ae0e6-f63b-4813-b5e0-9400c36b4bd0",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User successfully confirmed.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/{{email2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"{{email2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after email edit and confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5aa3043e-3f2b-4333-a90a-f82063bf9afd",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"email2 = pm.collectionVariables.get(\"email2\");",
											"",
											"",
											"tests[\"Is email correct\"] = response.email == email2",
											"tests[\"Is confirmed == 0\"] = response.is_confirmed == 1"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit email with same email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "904a610b-63e0-4af2-b24b-b9557467d199",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The new email is the same as the old one !\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{email2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/email",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3c02cee-7278-4d2c-9726-8b1f37aff66a",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User password successfully updated.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"old_password\": \"{{password}}\",\n\t\"new_password\": \"{{password2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/password",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user after password edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed31d440-d163-4917-bfb3-83e2b85c3f93",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 1\"] = response.return.is_profile_completed == 1",
											"",
											"pm.collectionVariables.set(\"access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password2}}\",\n\t\"username\": \"{{email2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit geolocation with ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fc9f0a9-fc2b-43fe-b167-07f2d8b15539",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"New location sucessfully saved.\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ip\": \"{{ip}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/geolocation",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"geolocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after ip geoloc edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe934a48-e836-4020-9a7f-679d55a2d22b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Is geohash correct\"] = response.geohash == \"u0bc2bxyswj9\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit geolocation with lat lng",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3724a5e6-42b8-404d-ae26-9fe7f04dd1e4",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"New location sucessfully saved.\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ip\": \"{{ip}}\",\n\t\"lat\": {{lat}},\n\t\"lng\": {{lng}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/geolocation",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"geolocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after lat lng edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be9af427-fbb5-4a55-accf-df55ff9b83da",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Is geohash correct\"] = response.geohash == \"u0bcg01kq09g\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{email2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{email2}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "View",
					"item": [
						{
							"name": "Viewed me",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54da457d-74fb-4efb-8649-d88b8ec32b5f",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Viewed me list is empty\"] = response.viewed_me.length == 0",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/history/viewed/me",
									"host": [
										"{{host}}"
									],
									"path": [
										"history",
										"viewed",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Viewed profiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0b8a9ec-6ea3-4930-bb9e-e70a1dd7621d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Viewed list is empty\"] = response.viewed.length == 0",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/history/viewed",
									"host": [
										"{{host}}"
									],
									"path": [
										"history",
										"viewed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unknown user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e92ddcae-c1ec-40c9-8530-234c3769eaa7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User -1 not found.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/view/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"view",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Yourself",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cd46e01-f3db-4aca-b817-be229cdfc747",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Cannot view yourself.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/view/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"view",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Someone's profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f895895-db7c-427b-b2fd-09a7ccccf7b1",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Profile's usernam is correct\"] = response.profile.username == \"lazylion445\"",
											"tests[\"Returned profile id is correct\"] = response.profile.id == 500"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/view/500",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"view",
										"500"
									]
								}
							},
							"response": []
						},
						{
							"name": "Viewed profiles after viewing someone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03c0d267-fd39-4a7b-b186-380c0da2a000",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Viewed list is empty\"] = response.viewed.length == 1",
											"tests[\"Viewed n1 is correct\"] = response.viewed[0].id == 500"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/history/viewed",
									"host": [
										"{{host}}"
									],
									"path": [
										"history",
										"viewed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create random views",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2797ea16-a28a-4556-97f2-e0567e6ab328",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45437f7b-a193-45d4-bb71-4c94938ebc22",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "xX69jules69Xx"
									}
								],
								"url": {
									"raw": "{{host}}/debug/views/10",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"views",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Viewed me after random views",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f825bee1-cede-48e5-ba81-f3efeeae7773",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Viewed me list is empty\"] = response.viewed_me.length == 10",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/history/viewed/me",
									"host": [
										"{{host}}"
									],
									"path": [
										"history",
										"viewed",
										"me"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Report",
					"item": [
						{
							"name": "Get your profile no reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86f4a1f7-e072-46ff-8533-42acc89f09bd",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Reports sent length is 1\"] = response.reports.sent.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unknown user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d50fe250-35fd-4939-84bc-e317a4c3c4b7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User -1 not found.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reason\": \"a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Yourself",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c1db00f-1372-4c82-8531-8659fd82c101",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Cannot report yourself.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reason\": \"a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong reason",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62fe33b6-e1f9-464b-a21d-6c19ebe785ab",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Reason must be 'harassment', 'bot', 'spam' or 'inappropriate content'.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reason\": \"a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/500",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"500"
									]
								}
							},
							"response": []
						},
						{
							"name": "User 500",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ab6e11b-5a69-479b-bd1f-db3cc6c50ff5",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reason\": \"spam\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/500",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"500"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get your profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edb7fca3-6dd2-470e-b56c-477ac637633b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_id = pm.collectionVariables.get(\"id\");",
											"",
											"tests[\"Reports sent length is 1\"] = response.reports.sent.length == 1",
											"tests[\"Reported id is correct\"] = response.reports.sent[0].reported_id == 500",
											"tests[\"Reporter id is correct\"] = response.reports.sent[0].reporter_id == user_id",
											"tests[\"Report reason is correct\"] = response.reports.sent[0].reason == \"spam\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Debug report user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d801f78e-c83c-46d9-bc74-016368caf097",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reported_id\": {{id}},\n\t\"reporter_id\": 500,\n\t\"reason\": \"spam\",\n    \"details\": \"AAA\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/debug/report",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get your profile after report",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2f3c1e9-c86d-44a3-93cc-9fbb700034e3",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_id = pm.collectionVariables.get(\"id\");",
											"",
											"tests[\"Reports received length is 1\"] = response.reports.received.length == 1",
											"tests[\"Reported id is correct\"] = response.reports.received[0].reported_id == user_id",
											"tests[\"Reporter id is correct\"] = response.reports.received[0].reporter_id == 500",
											"tests[\"Report reason is correct\"] = response.reports.received[0].reason == \"spam\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Recommendations",
			"item": [
				{
					"name": "Calc recommendations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "894a8b37-b908-4168-8fb1-b7e50e646311",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"",
									"tests[\"Recommendations length is correct\"] = response.recommendations.length > 10",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"force\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/recommendations",
							"host": [
								"{{host}}"
							],
							"path": [
								"recommendations"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Add geoloc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca210f53-b6b6-474b-b6af-267d2b8cb9d7",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"New location sucessfully saved.\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ip\": \"{{ip}}\",\n\t\"lat\": {{lat}},\n\t\"lng\": {{lng}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/profile/edit/geolocation",
							"host": [
								"{{host}}"
							],
							"path": [
								"profile",
								"edit",
								"geolocation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search no params",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e90278ce-f7bb-4395-a88c-b2b9a2060d2a",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"tests[\" > 0 search results\"] = response.search_results.length != 0"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"min_age\": -1,\n    \"max_age\": -1,\n    \"min_score\": -1,\n    \"max_score\": -1,\n    \"tags\": [],\n    \"max_distance\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search age > 25",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e4fc52c-5c47-4efa-8a1a-5525a12c3292",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"Age >= 25 for all users\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if (user.age < 25) {",
									"            tests[\"Age >= 25 for all users\"] = false",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"min_age\": 25,\n    \"max_age\": -1,\n    \"min_score\": -1,\n    \"max_score\": -1,\n    \"tags\": [],\n    \"max_distance\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search age < 25",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6491113f-54b4-447b-b44e-a4bbf4f6c6f8",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"Age <= 25 for all users\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if (user.age > 25) {",
									"            tests[\"Age <= 25 for all users\"] = false",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"min_age\": -1,\n    \"max_age\": 25,\n    \"min_score\": -1,\n    \"max_score\": -1,\n    \"tags\": [],\n    \"max_distance\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search 25 > age > 20",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d93a613-8145-4cf6-b2fb-9f71ecc10962",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"25 > age > 20 for all users\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if ((user.age > 25) || (user.age < 20)) {",
									"            tests[\"25 > age > 20 for all users\"] = false",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"min_age\": 20,\n    \"max_age\": 25,\n    \"min_score\": -1,\n    \"max_score\": -1,\n    \"tags\": [],\n    \"max_distance\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search score > 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b434faeb-67a1-4b8e-8f94-61d0da7642cb",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"Score >= 50 for all users\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if (user.heat_score < 50) {",
									"            tests[\"Score >= 50 for all users\"] = false",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"min_age\": -1,\n    \"max_age\": -1,\n    \"min_score\": 50,\n    \"max_score\": -1,\n    \"tags\": [],\n    \"max_distance\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search score < 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a1e9850-c4c2-46eb-8583-0c5b1e4a77d3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"Score <= 50 for all users\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if (user.heat_score > 50) {",
									"            tests[\"Score <= 50 for all users\"] = false",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"min_age\": -1,\n    \"max_age\": -1,\n    \"min_score\": -1,\n    \"max_score\": 50,\n    \"tags\": [],\n    \"max_distance\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search 100 > score > 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4002778b-378b-46c0-849d-c299d4775125",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"Score 100 > score > 50 for all users\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if ((user.heat_score < 50) || (user.heat_score > 100)) {",
									"            tests[\"Score 100 > score > 50 for all users\"] = false",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"min_age\": -1,\n    \"max_age\": -1,\n    \"min_score\": 50,\n    \"max_score\": 100,\n    \"tags\": [],\n    \"max_distance\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search max distance 5000km",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f63f712-c05d-45b6-be71-d19a93e8e882",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"Distance <= 5000 for all users\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if (user.distance > 5000) {",
									"            tests[\"Distance <= 5000 for all users\"] = false",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"min_age\": -1,\n    \"max_age\": -1,\n    \"min_score\": 50,\n    \"max_score\": -1,\n    \"tags\": [],\n    \"max_distance\": 5000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea0c11f1-5447-4d9a-ba1d-addfe9faabe8",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"common tags not null for all users\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if (user.common_tags.length == 0) {",
									"            tests[\"common tags not null for all users\"] = false",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"min_age\": -1,\n    \"max_age\": -1,\n    \"min_score\": -1,\n    \"max_score\": -1,\n    \"tags\": [\"sushi\", \"movies\"],\n    \"max_distance\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search full params",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "def98151-b3b6-48a7-8db6-35c774ce5390",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"40 > age > 18 for all users\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if ((user.age > 40) || (user.age < 18)) {",
									"            tests[\"40 > age > 18 for all users\"] = false",
									"            break",
									"        }",
									"    }",
									"}",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"Score 150 > score > 1 for all users\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if ((user.heat_score < 1) || (user.heat_score > 150)) {",
									"            tests[\"Score 150 > score > 1 for all users\"] = false",
									"            break",
									"        }",
									"    }",
									"}",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"Distance <= 7000 for all users\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if (user.distance > 7000) {",
									"            tests[\"Distance <= 7000 for all users\"] = false",
									"            break",
									"        }",
									"    }",
									"}",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"common tags not null for all users\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if (user.common_tags.length == 0) {",
									"            tests[\"common tags not null for all users\"] = false",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"min_age\": 18,\n    \"max_age\": 40,\n    \"min_score\": 1,\n    \"max_score\": 150,\n    \"tags\": [\"sushi\", \"movies\", \"netflix\"],\n    \"max_distance\": 7000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get search values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "572c500d-1474-4c0f-8dc3-11dcd91b2285",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/search/values",
							"host": [
								"{{host}}"
							],
							"path": [
								"search",
								"values"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Block",
			"item": [
				{
					"name": "Unknown user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb353df4-d947-49d1-b6f3-733be3b9bb0d",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"User -1 not found.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/profile/block/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"profile",
								"block",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Yourself",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "316dfc3a-23bf-456f-945e-8171291da654",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Cannot block yourself.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"a\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/profile/block/{{id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"profile",
								"block",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "598e5f86-9c2b-4354-9e56-e08e63f0035c",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/profile/block/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"profile",
								"block",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Block twice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bf18855-d2f6-4764-b1d2-52b3efd99613",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"User -1 not found.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/profile/block/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"profile",
								"block",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search after block",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5a50ae2-29a3-44c7-b874-7592f67fd87a",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"User 1500 is not in search\"] = true",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if (user.id == 1500) {",
									"            tests[\"User 1500 is not in search\"] = false",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"min_age\": -1,\n    \"max_age\": -1,\n    \"min_score\": -1,\n    \"max_score\": -1,\n    \"tags\": [],\n    \"max_distance\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Force recommendations after block",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdef29e5-4bee-4d2e-8fbb-6145bc1388b4",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"",
									"if (response.recommendations.length != 0) {",
									"    tests[\"User 1500 is not in recommendations\"] = true",
									"    for (var i = 0; i < response.recommendations.length; i++) {",
									"        user = response.recommendations[i]",
									"        if (user.id == 1500) {",
									"            tests[\"User 1500 is not in recommendations\"] = false",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/recommendations?force=True",
							"host": [
								"{{host}}"
							],
							"path": [
								"recommendations"
							],
							"query": [
								{
									"key": "force",
									"value": "True"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unblock unknow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a0beaa-f104-4ff8-82bd-4df42a27b245",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"User -1 not found.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/profile/unblock/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"profile",
								"unblock",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unblock user 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5670637-b5cb-4117-b130-39cc7922b23c",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"Unblock successful.\"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/profile/unblock/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"profile",
								"unblock",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Double unblock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "252fd8b0-535d-49df-bc9a-e432515a602a",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"You didn't block this user.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/profile/unblock/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"profile",
								"unblock",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search after unblock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "175e190a-98af-43cd-85ab-1f1e5daaf0a5",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"",
									"if (response.search_results.length != 0) {",
									"    tests[\"User 1500 is in search\"] = false",
									"    for (var i = 0; i < response.search_results.length; i++) {",
									"        user = response.search_results[i]",
									"        if (user.id == 1500) {",
									"            tests[\"User 1500 is in search\"] = true",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"min_age\": -1,\n    \"max_age\": -1,\n    \"min_score\": -1,\n    \"max_score\": -1,\n    \"tags\": [],\n    \"max_distance\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Force recommendations after unblock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a97db51f-4ea1-4622-bfbd-6e1172ac51a3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"",
									"if (response.recommendations.length != 0) {",
									"    tests[\"User 1500 is in recommendations\"] = false",
									"    for (var i = 0; i < response.recommendations.length; i++) {",
									"        user = response.recommendations[i]",
									"        if (user.id == 1500) {",
									"            tests[\"User 1500 is in recommendations\"] = true",
									"            break",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/recommendations?force=True",
							"host": [
								"{{host}}"
							],
							"path": [
								"recommendations"
							],
							"query": [
								{
									"key": "force",
									"value": "True"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Like/Unlike/Superlike/Match",
			"item": [
				{
					"name": "Unknown user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5be57c99-071e-48ce-b32c-e8d842fcff9d",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"User -1 not found.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_superlike\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/like/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"like",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Yourself",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "960b47f4-6b01-42ba-b9e8-4ef9a6b9ba5e",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Cannot like yourself.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_superlike\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/like/{{id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"like",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like user 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0edff03-ba29-4d31-bdef-02495831640b",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"Liked user.\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_superlike\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/like/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"like",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like twice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03267b04-e4be-4ac8-9714-3c0d1be36db3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"You already liked this person.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_superlike\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/like/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"like",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike user 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9106911-2a30-4a1f-a65c-8ea7584fb6f0",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"Unliked user 1500.\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_superlike\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/unlike/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"unlike",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike twice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8b65c42-5e2e-487c-9831-dfd820ebe395",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"You never liked this person in the first place.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_superlike\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/unlike/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"unlike",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug like from 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d201971a-3ca7-4c30-8f05-a8a34e1d4348",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"value": "{{debug_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"liker_uid\": \"1500\",\n    \"liked_uid\": \"{{id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/debug/like",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like and match user 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8850d7aa-a0fd-4284-9b36-881db1132b36",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"It's a match !\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_superlike\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/like/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"like",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike and unmatch user 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13f5c8a0-d060-4d86-88d7-eba02b808eac",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"Unliked user 1500.\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_superlike\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/unlike/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"unlike",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug set superlikes to 1 left",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ef760e7-8c5c-4b52-ba94-cb6bd55b7bfb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"value": "{{debug_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/debug/superlikes_set/{{id}}/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"superlikes_set",
								"{{id}}",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Superlike user 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67051601-b827-4fd4-91ba-20470edf9c1a",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"It's a match !\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_superlike\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/like/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"like",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "No superlike left",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6324057b-8477-403b-9387-eeb091f73d19",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_superlike\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/like/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"like",
								"1500"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "Get no conversations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f3a8bac-d32f-41fe-9372-28ee6e461c8a",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Conversations are empty\"] = response.conversations.length == 0"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/conversations",
							"host": [
								"{{host}}"
							],
							"path": [
								"conversations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send message to unknow user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "753ade9d-d723-43b9-87db-d704ac283e05",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Recipient -1 not found.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_uid\": \"-1\",\n    \"content\": \"Hello!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/messages/send",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send message to self",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1878ae75-2f6b-4510-ab50-29e36d5be765",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Cannot send a message to yourself.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_uid\": \"{{id}}\",\n    \"content\": \"Hello World !\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/messages/send",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send message to user 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7147f883-a158-43fc-9eaa-98782c736164",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.message == \"Message successfully sent to 1500.\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_uid\": \"1500\",\n    \"content\": \"Hello World !\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/messages/send",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get conversations after message sent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8b68751-2ea4-499d-abaf-f87f3b55bcd3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Conversations is empty\"] = response.conversations.length == 1",
									"tests[\"Message is not unseen because you send the message\"] = response.conversations[0].is_unseen == false",
									"tests[\"Message content is correct\"] = response.conversations[0].last_message_content == \"Hello World !\"",
									"tests[\"With user is correct\"] = response.conversations[0].with_user.id == 1500",
									"",
									"pm.collectionVariables.set(\"my_msg_id\", response.conversations[0].last_message_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/conversations",
							"host": [
								"{{host}}"
							],
							"path": [
								"conversations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug get message from user 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4247b805-535a-42e3-91ab-773a2505bbc1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_uid\": \"1500\",\n    \"to_uid\": \"{{id}}\",\n    \"content\": \"My Reply\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/debug/messages/send",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"messages",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get conversations after reply from user 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a370659-d7b6-40a5-9ae6-c406415e4c1c",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Conversations is empty\"] = response.conversations.length == 1",
									"tests[\"Message is unseen because you received the message\"] = response.conversations[0].is_unseen == true",
									"tests[\"Message content is correct\"] = response.conversations[0].last_message_content == \"My Reply\"",
									"tests[\"With user is correct\"] = response.conversations[0].with_user.id == 1500"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/conversations",
							"host": [
								"{{host}}"
							],
							"path": [
								"conversations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unseen messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef1dd221-656e-462b-a117-b26d38ed3bdf",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.new_messages.length == 1",
									"tests[\"New message content is correct\"] = response.new_messages[0].content == \"My Reply\"",
									"tests[\"New message is_seen\"] = response.new_messages[0].is_seen == 0",
									"tests[\"New message seen timestamp is null\"] = response.new_messages[0].seen_timestamp == null"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/unseen",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"unseen"
							]
						}
					},
					"response": []
				},
				{
					"name": "See unknown user messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c10fdf82-4601-4809-bc42-87eb8f71d50c",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"With user -1 not found.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/see/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"see",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "See messages from user 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe6b2c23-2828-4915-b1f1-828ae6ebd27d",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.message == \"Messages marked as seen.\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/see/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"see",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get conversations after seeing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0311cf34-8792-42fa-8264-8f6d340e6596",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Conversations is empty\"] = response.conversations.length == 1",
									"tests[\"Message is not unseen\"] = response.conversations[0].is_unseen == false",
									"tests[\"Message content is correct\"] = response.conversations[0].last_message_content == \"My Reply\"",
									"tests[\"With user is correct\"] = response.conversations[0].with_user.id == 1500"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/conversations",
							"host": [
								"{{host}}"
							],
							"path": [
								"conversations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unseen messages after seeing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f197a023-817f-497a-8784-a5abfe13d49b",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.new_messages.length == 0"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/unseen",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"unseen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like unknown message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7377c1ad-9faf-42c3-8cf9-28550b957cd2",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Message -1 not found.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/like/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"like",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like your own message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ab1e42a-71f6-42ee-8c6a-a390f2cd7a80",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Cannot like your own message.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/like/{{my_msg_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"like",
								"{{my_msg_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug send message between two users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5025a227-f1ce-4ec6-8558-9635256cfe72",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_uid\": \"1500\",\n    \"to_uid\": \"1501\",\n    \"content\": \"It's a secret\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/debug/messages/send",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"messages",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug get message sent of 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a30e283-5421-442b-bb58-ce50248951b6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"pm.collectionVariables.set(\"other_msg_id\", response.messages[response.messages.length - 1].id);",
									"pm.collectionVariables.set(\"to_me_msg_id\", response.messages[response.messages.length - 2].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_uid\": \"1500\",\n    \"to_uid\": \"1501\",\n    \"content\": \"It's a secret\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/debug/messages/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"messages",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like a message not for you",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8109b29-14c6-4a99-875d-90752e6d4020",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Cannot like a message that isn't destined to you.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/like/{{other_msg_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"like",
								"{{other_msg_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like a message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ebd4d53-f5ea-4fac-a434-ea229902840b",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.success = true"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/like/{{to_me_msg_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"like",
								"{{to_me_msg_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like a message twice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d26a209-cab4-46c4-8a5c-02355e29ba84",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Message is already liked.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/like/{{to_me_msg_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"like",
								"{{to_me_msg_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike a message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6eec444d-dcfb-4527-9b49-86d2a8a82930",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.success == true"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/unlike/{{to_me_msg_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"unlike",
								"{{to_me_msg_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike a message twice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d47e59d7-a12a-4ccf-b45d-9697c5f722e0",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Message is already unliked.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/unlike/{{to_me_msg_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"unlike",
								"{{to_me_msg_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "HIstory",
			"item": [
				{
					"name": "Viewed profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c7ff5c3-1816-4e51-a3d8-7538d4fda84e",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Viewed list is empty\"] = response.viewed.length == 1",
									"tests[\"Viewed n1 is correct\"] = response.viewed[0].id == 500"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/history/viewed",
							"host": [
								"{{host}}"
							],
							"path": [
								"history",
								"viewed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profiles viewed me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00fea48e-8525-4286-9178-cd1fd585cd43",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Viewed me list is empty\"] = response.viewed_me.length == 10",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/history/viewed/me",
							"host": [
								"{{host}}"
							],
							"path": [
								"history",
								"viewed",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Liked profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "339022fb-0180-491a-98b4-2939382b7a75",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Liked list is filled with 1 entry\"] = response.liked.length == 1",
									"tests[\"Liked n1 is correct\"] = response.liked[0].id == 1500"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/history/liked",
							"host": [
								"{{host}}"
							],
							"path": [
								"history",
								"liked"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profiled liked me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "162b979a-d093-49a4-9d51-cd3227d070ac",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Liked me list contains one entry\"] = response.liked_me.length == 1",
									"tests[\"Liked me first entry's id is 1500\"] = response.liked_me[0].id == 1500",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/history/liked/me",
							"host": [
								"{{host}}"
							],
							"path": [
								"history",
								"liked",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Block user 1500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "739b106b-ac34-4958-8a25-c0c03a959600",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Success is true\"] = response.success == true"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/profile/block/1500",
							"host": [
								"{{host}}"
							],
							"path": [
								"profile",
								"block",
								"1500"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blocked profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5fd8356-150a-4d52-a7a2-81791689242e",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Blocked list is equal to 1\"] = response.blocked.length == 1",
									"tests[\"Blocked entry n1 is user 1500\"] = response.blocked[0].id = 1500"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/history/blocked",
							"host": [
								"{{host}}"
							],
							"path": [
								"history",
								"blocked"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "All notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06e897c0-f1ce-4c56-beb7-108f0d3ec454",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Notifications list length is 12\"] = response.notifications.length == 2",
									"tests[\"Notification 1 is unread\"] = response.notifications[0].is_seen == 0",
									"tests[\"Notification 1 is of type match\"] = response.notifications[0].type == \"match\"",
									"",
									"",
									"tests[\"Notification 2 is unread\"] = response.notifications[1].is_seen == 0",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/notifications",
							"host": [
								"{{host}}"
							],
							"path": [
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unread notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "024fce99-38c5-4ab3-830f-ef1df7c0f89d",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Notifications list length is 12\"] = response.notifications.length == 2",
									"",
									"pm.collectionVariables.set(\"notif_id\", response.notifications[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/notifications/unread",
							"host": [
								"{{host}}"
							],
							"path": [
								"notifications",
								"unread"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read unknow notif",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8eac7377-72ae-4f5d-abf8-63e9702c8f11",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Notification id -1 not found.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/notifications/read/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"notifications",
								"read",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf93f142-ba38-454d-8573-a0181076800a",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"Mark as read.\"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/notifications/read/{{notif_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"notifications",
								"read",
								"{{notif_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unread notifications after seeing one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "400da851-9687-4a2c-8864-f1c66b46eedf",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Notifications list length is 12\"] = response.notifications.length == 1",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/notifications/unread",
							"host": [
								"{{host}}"
							],
							"path": [
								"notifications",
								"unread"
							]
						}
					},
					"response": []
				},
				{
					"name": "All notifications after seeing one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc980ef3-facf-4f04-84ad-87504fbb5a73",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Notifications list length is 12\"] = response.notifications.length == 2",
									"tests[\"Notification 1 is unread\"] = response.notifications[0].is_seen == 1",
									"tests[\"Notification 1 is of type match\"] = response.notifications[0].type == \"match\"",
									"",
									"",
									"tests[\"Notification 2 is unread\"] = response.notifications[1].is_seen == 0",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/notifications",
							"host": [
								"{{host}}"
							],
							"path": [
								"notifications"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "DEBUG redis view all keys Copy",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "debug-auth-token",
						"value": "xX69jules69Xx",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/debug/redis",
					"host": [
						"{{host}}"
					],
					"path": [
						"debug",
						"redis"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset CI",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "debug-auth-token",
						"value": "xX69jules69Xx",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/debug/reset/{{id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"debug",
						"reset",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8f07f18d-a335-41f7-90e6-5a2ffecb6b2f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b3c7aec0-7948-4f20-bbce-883fb16b369c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "de9d17be-f7ca-4a75-af2e-dcfd5d60609a",
			"key": "host",
			"value": "http://127.0.0.1:5000"
		},
		{
			"id": "0cd6ffc1-1c75-47c2-8d8d-f5125648afac",
			"key": "access_token",
			"value": ""
		},
		{
			"id": "ed3db240-4fad-45f5-8a7a-095a337c5816",
			"key": "refresh_token",
			"value": ""
		},
		{
			"id": "821388fc-d8c6-4bbe-8646-2ab446976be9",
			"key": "debug_token",
			"value": "xX69jules69Xx"
		},
		{
			"id": "a10bcfc0-96f5-4e8e-84c4-076155ac6fbc",
			"key": "id",
			"value": "1541"
		},
		{
			"id": "47865117-86d5-457d-ab4b-be67216a58a7",
			"key": "first_name",
			"value": "Jules"
		},
		{
			"id": "01bb833b-a658-48d5-a2cc-b76e1016bb90",
			"key": "last_name",
			"value": "Lasne"
		},
		{
			"id": "daa86e8b-d927-4bae-a05a-6b4b28f43712",
			"key": "email",
			"value": "jules.lasne@example.org"
		},
		{
			"id": "192efd3a-7603-421c-be59-1fa2d8a9a0bb",
			"key": "username",
			"value": "seluj78"
		},
		{
			"id": "a78f5409-bfb0-45db-aa9c-b28d771ed2de",
			"key": "password",
			"value": "dolphin"
		},
		{
			"id": "bfcf2884-20c9-4ad9-b14f-82c6df4d248e",
			"key": "orientation",
			"value": "heterosexual"
		},
		{
			"id": "db6ac697-a874-44a1-9157-e9d522bce9bc",
			"key": "gender",
			"value": "male"
		},
		{
			"id": "6e9c5155-e56d-408a-8211-8cdb37083737",
			"key": "bio",
			"value": "Phasellus vel tortor vel elit scelerisque accumsan vel nec nunc. Ut condimentum vestibulum sapien non dictum. Vestibulum ac eleifend mi. Curabitur dictum vestibulum ex at placerat. Pellentesque odio mi, condimentum et sollicitudin at, finibus non leo. Aenean sed pulvinar nulla, nec tincidunt felis. Aenean nibh elit, aliquam sit amet lobortis et, pellentesque ut orci. Curabitur placerat sem id ex laoreet imperdiet. Curabitur dictum ac urna feugiat viverra. Vivamus nec pulvinar urna. Suspendisse vel ultrices est. Sed malesuada est vel orci venenatis scelerisque. Phasellus ultrices dignissim sapien, at mattis tellus mattis pulvinar. Sed ut euismod velit, id fermentum leo."
		},
		{
			"id": "2de8e81c-9179-406d-8873-5aff4b739f54",
			"key": "birthdate",
			"value": "06/04/1998"
		},
		{
			"id": "7e1d9f45-350f-4d91-8a16-0eaa1abf8685",
			"key": "first_name2",
			"value": "Félix"
		},
		{
			"id": "a19f2e27-d89a-443d-8d5f-b18dfa38a298",
			"key": "last_name2",
			"value": "Ensal"
		},
		{
			"id": "db1dfa44-09c4-4e85-9568-15ddfb78d7e7",
			"key": "username2",
			"value": "Ufree"
		},
		{
			"id": "bba960c3-9465-4b1c-90b2-8c0bba49091b",
			"key": "bio2",
			"value": "Donec quis porttitor ante, ac pulvinar nulla. Vivamus dignissim, ipsum ultricies interdum suscipit, risus tellus auctor mi, eu auctor metus sem quis urna. In maximus placerat ipsum, nec sodales elit aliquet sed. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Phasellus malesuada velit felis, non volutpat ex bibendum at. Maecenas aliquet sodales quam at consequat. Sed faucibus consequat tempor. Fusce consequat eu sem non tempus. Duis dapibus nunc vel tempus semper. Pellentesque dignissim tellus odio, vel luctus ipsum suscipit quis. Curabitur id erat at quam varius fermentum non in massa."
		},
		{
			"id": "ebc5791e-9317-409b-9195-0c869829de4b",
			"key": "gender2",
			"value": "other"
		},
		{
			"id": "7ffd0db7-a926-4c8e-bfb5-3efb4ffa81ac",
			"key": "orientation2",
			"value": "bisexual"
		},
		{
			"id": "75392ec7-f738-441d-af69-671b36a89b67",
			"key": "birthdate2",
			"value": "25/06/2000"
		},
		{
			"id": "5f247ade-3d4f-4b66-8e66-4949a809835a",
			"key": "email2",
			"value": "felix.ensal@example.org"
		},
		{
			"id": "79fbeabd-8711-4b7e-a3ce-a2fff88216aa",
			"key": "password2",
			"value": "dolphin2"
		},
		{
			"id": "010ca345-c7b8-4443-8996-5a0d1ddffa40",
			"key": "ip",
			"value": "90.108.46.63"
		},
		{
			"id": "dcc0c64a-7c6d-48da-ad72-8f1259b12c70",
			"key": "lat",
			"value": "49.5271"
		},
		{
			"id": "a1f10ead-5858-4820-b474-93b50f9d7b59",
			"key": "lng",
			"value": "1.1885"
		},
		{
			"id": "ad61ddc7-cb2a-4fc7-ba25-ddb68a83a7a8",
			"key": "my_msg_id",
			"value": "-1"
		},
		{
			"id": "cf98244b-d9b5-4f6b-969a-dea0bf631e93",
			"key": "to_me_msg_id",
			"value": "-1"
		},
		{
			"id": "bcd2370c-fee5-4f5c-aad8-ff80ccec2c8c",
			"key": "other_msg_id",
			"value": "-1"
		},
		{
			"id": "c3fef2db-d89f-4cab-8e93-9aa0f7746395",
			"key": "user_access_token",
			"value": ""
		},
		{
			"id": "0e10a01a-fe4d-4d3b-865c-3e34bfb98003",
			"key": "user_refresh_token",
			"value": ""
		},
		{
			"id": "45055d3a-d126-443d-9c60-b41b65109fe7",
			"key": "notif_id",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}
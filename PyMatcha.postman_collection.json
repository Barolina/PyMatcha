{
	"info": {
		"_postman_id": "33f2f20e-4ae2-42ad-8c56-53196432e628",
		"name": "PyMatcha",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Create user",
					"item": [
						{
							"name": "Create user no JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ef614bd-e92a-4a6b-9e16-2eb9a8c3d606",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing json body.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user malformed JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3ae559c-9587-4ad4-a79e-4a6e851da11c",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The Json Body is malformed\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user missing key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccdbec95-4dfd-4618-9772-5cef79f73098",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing keys ['username', 'first_name', 'last_name'].\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user too many keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "893bac2d-763b-4e34-8507-f5f2cdc43bb7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"You can't specify key 'role'.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\",\n\t\"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd7c5637-25c6-4a0c-8c8f-58f77b3846e7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user email already taken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c910369c-9203-4a5a-9b35-3a7e069f2165",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 409",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"ConflictError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcc07149-ec79-43b2-9a04-9d6741569cc9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "debug-auth-token",
										"value": "{{debug_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user not existant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08f93b56-aed9-414e-b953-9c5e2a91a9c7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "debug-auth-token",
										"value": "{{debug_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ee2a8f-b47e-46d6-bfe3-7b4a4f6c17e7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Confirm User",
					"item": [
						{
							"name": "Login user without confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00bf2176-6e9f-4c1d-a0da-a17ef0b9c462",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"JSON return code is 401\"] = response.code == 401",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User needs to be confirmed first.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"password\": \"{{user_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm user without debug token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0079172-864c-446a-aaab-337ed1f50a5f",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"JSON return code is 401\"] = response.code == 401",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing debug auth token.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/debug/users/confirm/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm user unknow user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5c23cd1-3c22-4d9f-abab-ab5a2cdd8274",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User -1 not found\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d90b1efa-eb85-49eb-8ebd-af568584d3ff",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User successfully confirmed\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm user already confirmed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ecb334d-3cbc-482e-9d1b-e9a8fd905b93",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User already confirmed\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"{{user_email}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Login user",
					"item": [
						{
							"name": "Login user no JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d8bf89b-e772-4f7d-aaf1-b8521d2adb55",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing json body.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user malformed JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aae59bb2-7762-4746-b8f5-d3afd170ca5e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The Json Body is malformed\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user missing username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f376d93-fd41-46e3-ab73-595cde6175b4",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing keys ['username'].\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{user_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user with username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e10688e6-53e0-43de-b9c6-1e2fdab08e4b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"password\": \"{{user_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user with email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef228ced-b948-4beb-a04c-40c1efbc08f7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da2f2db3-b810-40f5-8732-a45e5f0dc689",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/refresh",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03880fb4-1c4c-41cc-8fc3-1d55b6bdae39",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2b7ab20b-c5a1-4b8c-a4c2-a9f501f9a02c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get all users missing auth header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37b58aa3-2003-4255-b4a6-16a0ec509fb5",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"tests[\"JSON return code is 401\"] = response.code == 401",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing Authorization Header\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users expired auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1683f7f0-a248-497c-b18a-dd1adc6ac0f5",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"tests[\"JSON return code is 401\"] = response.code == 401",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"The access token has expired\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expired_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "928cf7ee-dd14-459e-a299-a2e31ebbea4d",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON array is not empty\"] = response.length != 0"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d05304d2-c671-49dd-adc6-2a0cd7d7cbc4",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"user_email = pm.collectionVariables.get(\"user_email\");",
									"user_username = pm.collectionVariables.get(\"user_username\");",
									"",
									"tests[\"Is email correct\"] = response.email == user_email",
									"tests[\"Is username correct\"] = response.username == user_username",
									"tests[\"Are tags present\"] = response.tags.length == 0",
									"",
									"pm.collectionVariables.set(\"user_id\", response.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_username}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "157d53ec-3d71-453e-90bc-172e1d7d3531",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"user_email = pm.collectionVariables.get(\"user_email\");",
									"user_username = pm.collectionVariables.get(\"user_username\");",
									"",
									"tests[\"Is email correct\"] = response.email == user_email",
									"tests[\"Is username correct\"] = response.username == user_username"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get online users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50e7dc59-141e-4e61-bdab-cca8a83ef81e",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// user_id = pm.collectionVariables.get(\"user_id\");",
									"",
									"// tests[\"User id is correct\"] = response[0].id == user_id"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/online",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"online"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Complete profile",
					"item": [
						{
							"name": "Complete profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0f4bed4-f29c-46ff-a16b-66db85d46a87",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Profile completed !\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{user_orientation}}\",\n\t\"bio\": \"{{user_bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{user_gender}}\",\n\t\"birthdate\": {{user_birthdate}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login after profile completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3bcacc7-f9f6-42ad-8590-2022cfae9c6f",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 1",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after completed profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2383f4d3-633d-40e9-a730-e39d9d24f1e5",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_email = pm.collectionVariables.get(\"user_email\");",
											"user_username = pm.collectionVariables.get(\"user_username\");",
											"user_orientation = pm.collectionVariables.get(\"user_orientation\");",
											"user_gender = pm.collectionVariables.get(\"user_gender\");",
											"",
											"tests[\"Is email correct\"] = response.email == user_email",
											"tests[\"Is username correct\"] = response.username == user_username",
											"tests[\"Are tags present\"] = response.tags.length == 7",
											"tests[\"User orientation is correct\"] = response.orientation == user_orientation",
											"tests[\"User gender is correct\"] = response.gender == user_gender",
											"pm.collectionVariables.set(\"user_id\", response.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_username}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Edit profile",
					"item": [
						{
							"name": "Edit profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8ff8a3b1-9b9c-4cb7-a9dd-c29eee539368",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f6ddbcb3-6fd6-4ef6-85a8-d176cd5f75b2",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User successfully modified !\"",
											"",
											"pm.collectionVariables.set(\"user_username\", \"FooBar\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"homosexual\",\n\t\"bio\": \"{{user_bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"male\",\n\t\"birthdate\": {{user_birthdate}},\n\t\"first_name\": \"Foo\",\n\t\"last_name\": \"Bar\",\n\t\"username\": \"FooBar\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f13dea7-7c67-41ec-97ca-14ed10444b09",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_email = pm.collectionVariables.get(\"user_email\");",
											"",
											"tests[\"Is email correct\"] = response.email == user_email",
											"tests[\"Is username correct\"] = response.username == \"FooBar\"",
											"tests[\"Are tags present\"] = response.tags.length == 7",
											"tests[\"User orientation is correct\"] = response.orientation == \"homosexual\"",
											"tests[\"User gender is correct\"] = response.gender == \"male\"",
											"pm.collectionVariables.set(\"user_id\", response.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b875494e-b2dc-47b2-8be8-6738230c66ac",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Email sent for new email\"",
											"pm.collectionVariables.set(\"user_email\", \"bar@example.org\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"bar@example.org\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/email",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74dc8e5c-e73a-4105-83a3-d6123262c458",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_email = pm.collectionVariables.get(\"user_email\");",
											"",
											"tests[\"Is email correct\"] = response.email == \"bar@example.org\"",
											"tests[\"Is username correct\"] = response.username == \"FooBar\"",
											"tests[\"Are tags present\"] = response.tags.length == 7",
											"tests[\"User orientation is correct\"] = response.orientation == \"homosexual\"",
											"tests[\"User gender is correct\"] = response.gender == \"male\"",
											"tests[\"Is confirmed == 0\"] = response.is_confirmed == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm user after email edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3334c423-c936-476b-98ca-3223898d50b5",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User successfully confirmed\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after email edit and confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a10263d-d6f2-4154-82bb-e1c2bdaaf584",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_email = pm.collectionVariables.get(\"user_email\");",
											"",
											"tests[\"Is email correct\"] = response.email == \"bar@example.org\"",
											"tests[\"Is username correct\"] = response.username == \"FooBar\"",
											"tests[\"Are tags present\"] = response.tags.length == 7",
											"tests[\"User orientation is correct\"] = response.orientation == \"homosexual\"",
											"tests[\"User gender is correct\"] = response.gender == \"male\"",
											"tests[\"Is confirmed == 0\"] = response.is_confirmed == 1"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit email with same email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddc3695a-8c73-44b7-aa1c-965a32b3d0dd",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The new email is the same as the old one !\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"bar@example.org\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/email",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7b0849b-2da8-4c40-b2b2-fb1adde71c16",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User password successfully updated.\"",
											"pm.collectionVariables.set(\"user_password\", \"dolphin2\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"old_password\": \"{{user_password}}\",\n\t\"new_password\": \"dolphin2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/password",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user after password edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e4ec56d-ad5e-450b-805e-230bfd47f4d7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 1\"] = response.return.is_profile_completed == 1",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit geolocation with ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39231db4-62ff-4230-8a9f-d6bcda2e91ad",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"New location sucessfully saved.\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ip\": \"{{user_ip}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/geolocation",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"geolocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after ip geoloc edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "499a0ac6-2355-490c-8f0f-010c397591be",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Is geohash correct\"] = response.geohash == \"ezzweqbd4wuk\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit geolocation with lat lng",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f2ec5c9-96dc-4e1b-af46-96352d0d2135",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"New location sucessfully saved.\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ip\": \"{{user_ip}}\",\n\t\"lat\": {{user_lat}},\n\t\"lng\": {{user_lng}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/geolocation",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"geolocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after lat lng edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14daee88-fcc1-4a60-8100-45eded9ecbd8",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Is geohash correct\"] = response.geohash == \"ezzx4fcq327u\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "View profile",
					"item": [
						{
							"name": "Get profile views before views",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2d4b356-b7c7-43d4-85c5-b631d03f99bd",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"View count\"] = response.views.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/views",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"views"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create random views",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "545bcc8e-5159-4ce2-9a28-11efc5dfbf62",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "90d417c9-84fa-457d-adbb-93c453b15a29",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"value": "xX69jules69Xx",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/debug/views/78",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"views",
										"78"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get profile views",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dade5edf-80bc-4e3c-8509-d56281228062",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"View count\"] = response.views.length == 78"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/views",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"views"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Report profile",
					"item": [
						{
							"name": "Get user no reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff33570c-3b24-4ae4-bf8a-3138fe9300ef",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"reports_received count\"] = response.reports_received.length == 0",
											"tests[\"reports_sent count\"] = response.reports_sent.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "debug-auth-token",
										"value": "{{debug_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reason\": \"bot\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/debug/reports/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"reports",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user no reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1a2075b-9abf-4ae8-ab8a-552e71b65452",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"One report has been sent\"] = response.reports.sent.length == 0",
											"tests[\"No report has been received\"] = response.reports.received.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DEBUG Report +1 profile",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"value": "{{debug_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reporter_id\": {{user_id}},\n\t\"reported_id\": 1,\n\t\"reason\": \"bot\",\n\t\"details\": \"He's a bot !\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/debug/reports",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"reports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user 1 report sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f17009a4-5207-4c0b-bdef-34184cf5b625",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"reports_received count\"] = response.reports_received.length == 0",
											"tests[\"reports_sent count\"] = response.reports_sent.length == 1"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reason\": \"bot\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/debug/reports/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"reports",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user 1 report sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fd79f66-b27f-4227-8789-86e9c9028014",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"One report has been sent\"] = response.reports.sent.length == 1",
											"tests[\"No report has been received\"] = response.reports.received.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Report profile bad reason",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fda168b8-c027-415f-982c-fd498a3e1c74",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Reason must be 'harassment', 'bot', 'spam' or 'inappropriate content'\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reason\": \"bad reason\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Report profile user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d71fba28-e4a4-459c-9dbb-d60aebfc01cf",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User -1 not found\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reason\": \"bot\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user to report",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36f664ce-d526-4581-bd1e-9a1983f7d734",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"report_me\",\n\t\"email\": \"report_me@example.org\",\n\t\"password\": \"dolphin\",\n\t\"first_name\": \"Report\",\n\t\"last_name\": \"Me\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Report user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2818b017-7860-4556-8059-fb0f4f4d5e8a",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Report created on user report_me@example.org\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reason\": \"bot\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/report_me@example.org",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"report_me@example.org"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user 2 reports sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22dac958-9bf1-4867-a746-fc25681b3658",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"One report has been sent\"] = response.reports.sent.length == 2",
											"tests[\"No report has been received\"] = response.reports.received.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user report_me",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8658af62-8676-45b4-870f-bb4c34036aad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/report_me@example.org",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"report_me@example.org"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Reset",
			"item": [
				{
					"name": "Delete user after tests & reset variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab5c7873-b122-4d66-bb53-d200ee5511cc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.collectionVariables.set(\"user_email\", \"foo@example.org\")",
									"pm.collectionVariables.set(\"user_username\", \"foo\")",
									"pm.collectionVariables.set(\"user_firstname\", \"Foo\")",
									"pm.collectionVariables.set(\"user_lastname\", \"Bar\")",
									"pm.collectionVariables.set(\"user_gender\", \"other\")",
									"pm.collectionVariables.set(\"user_orientation\", \"bisexual\")",
									"pm.collectionVariables.set(\"user_password\", \"admin\")",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/users/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset views table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e26bd80-adcd-472d-a239-4b7cdc4403fb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/views",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"views"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset reports table",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddc96ae3-defe-40c5-b607-aba4498c7e58",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/reports",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"reports"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "DEBUG redis view all keys",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "debug-auth-token",
						"value": "xX69jules69Xx",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/debug/redis",
					"host": [
						"{{host}}"
					],
					"path": [
						"debug",
						"redis"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{user_access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2cc3d134-eb34-4730-8210-2065800a7560",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "86a65fc9-d3fe-4c9c-bcb4-e0a093425b33",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "1457d0f6-a65f-4336-bb10-5ba248fd02e4",
			"key": "host",
			"value": "http://127.0.0.1:5000",
			"type": "string"
		},
		{
			"id": "f439fe2f-9a94-477c-87c4-4cee9fd649f9",
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"id": "b0717176-65f1-4bf9-85e1-d5a4670f4407",
			"key": "user_email",
			"value": "foo@example.org",
			"type": "string"
		},
		{
			"id": "8ae38156-a458-436e-b2a9-f2599f7c9ee4",
			"key": "user_username",
			"value": "foo",
			"type": "string"
		},
		{
			"id": "c2329f20-61d2-4f34-a9a5-9f490e4b3927",
			"key": "user_password",
			"value": "admin",
			"type": "string"
		},
		{
			"id": "fa6fc205-25e2-4150-a6a3-9fc0005e7cef",
			"key": "user_firstname",
			"value": "Foo",
			"type": "string"
		},
		{
			"id": "f8f455bd-667f-478c-8422-b249069be145",
			"key": "user_lastname",
			"value": "Bar",
			"type": "string"
		},
		{
			"id": "b8f2e62e-522a-428c-a2f8-c24f59bd5fd8",
			"key": "debug_token",
			"value": "xX69jules69Xx",
			"type": "string"
		},
		{
			"id": "9061c605-92f2-4a48-9de2-47aa76a4b54e",
			"key": "user_access_token",
			"value": "",
			"type": "string"
		},
		{
			"id": "087c57f0-6dc7-45a3-a49d-cf10e7c64ae5",
			"key": "user_refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"id": "c3abd8e6-2d5c-49ff-81a5-8c0eef9d3d30",
			"key": "expired_token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTAyNDIyNjQsIm5iZiI6MTU5MDI0MjI2NCwianRpIjoiNTM0ZGI5NzQtOWE4Ni00MGViLWE1NDEtMDg3N2ZmNzQ3NDVhIiwiZXhwIjoxNTkwMjQyMzI0LCJpZGVudGl0eSI6eyJpZCI6NTEyLCJlbWFpbCI6ImZvb0BleGFtcGxlLm9yZyIsInVzZXJuYW1lIjoiYmFyIiwiaXNfb25saW5lIjp0cnVlLCJkYXRlX2xhc3RzZWVuIjoiU2F0LCAyMyBNYXkgMjAyMCAxMzo1Nzo0NCBHTVQifSwiZnJlc2giOnRydWUsInR5cGUiOiJhY2Nlc3MifQ.NTp2P0WNkXDwzuzrcNIQdeAfizQ57HQgkzBLSvY1yHU",
			"type": "string"
		},
		{
			"id": "06d6445e-4a08-4a73-9f77-c373e72e11a2",
			"key": "user_orientation",
			"value": "heterosexual",
			"type": "string"
		},
		{
			"id": "bea3f45f-1b31-4a5a-a8b0-3b19a51121cd",
			"key": "user_bio",
			"value": "Lorem Ipsum is the single greatest threat. We are not - we are not keeping up with other websites. Lorem Ipsum best not make any more threats to your website. It will be met with fire and fury like the world has never seen. Does everybody know that pig named Lorem Ipsum? An ‘extremely credible source’ has called my office and told me that Barack Obama’s placeholder text is a fraud.",
			"type": "string"
		},
		{
			"id": "96a2a049-ba40-4a0d-a121-87ae2c69e405",
			"key": "user_gender",
			"value": "male",
			"type": "string"
		},
		{
			"id": "368ec511-6d63-4078-8ce9-927099fd5e0d",
			"key": "user_birthdate",
			"value": "1590674628",
			"type": "string"
		},
		{
			"id": "902e8352-9d84-4506-8d2f-43d6e5955aa5",
			"key": "user_lat",
			"value": "44.8404",
			"type": "string"
		},
		{
			"id": "40b99878-a229-47d6-b542-0658ca174bac",
			"key": "user_lng",
			"value": "-0.5805",
			"type": "string"
		},
		{
			"id": "4d97f30c-1c59-4b6f-b305-3e52b9eb4e88",
			"key": "user_ip",
			"value": "77.205.46.181",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}
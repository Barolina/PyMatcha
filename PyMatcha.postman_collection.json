{
	"info": {
		"_postman_id": "33f2f20e-4ae2-42ad-8c56-53196432e628",
		"name": "PyMatcha",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Create user no JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ef614bd-e92a-4a6b-9e16-2eb9a8c3d606",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing json body.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user malformed JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3ae559c-9587-4ad4-a79e-4a6e851da11c",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"The Json Body is malformed\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user missing key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccdbec95-4dfd-4618-9772-5cef79f73098",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing keys ['username', 'first_name', 'last_name'].\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user too many keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "893bac2d-763b-4e34-8507-f5f2cdc43bb7",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"You can't specify key 'role'.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\",\n\t\"role\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd7c5637-25c6-4a0c-8c8f-58f77b3846e7",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user email already taken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c910369c-9203-4a5a-9b35-3a7e069f2165",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 409",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"ConflictError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcc07149-ec79-43b2-9a04-9d6741569cc9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "debug-auth-token",
								"value": "{{debug_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/debug/users/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user not existant",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08f93b56-aed9-414e-b953-9c5e2a91a9c7",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "debug-auth-token",
								"value": "{{debug_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/debug/users/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user after delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ee2a8f-b47e-46d6-bfe3-7b4a4f6c17e7",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user without confirmation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00bf2176-6e9f-4c1d-a0da-a17ef0b9c462",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"tests[\"JSON return code is 401\"] = response.code == 401",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"User needs to be confirmed first.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm user without debug token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0079172-864c-446a-aaab-337ed1f50a5f",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"tests[\"JSON return code is 401\"] = response.code == 401",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing debug auth token.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/debug/users/confirm/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"confirm",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm user unknow user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5c23cd1-3c22-4d9f-abab-ab5a2cdd8274",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"User -1 not found\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/users/confirm/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"confirm",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d90b1efa-eb85-49eb-8ebd-af568584d3ff",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"User successfully confirmed\"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/users/confirm/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"confirm",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm user already confirmed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ecb334d-3cbc-482e-9d1b-e9a8fd905b93",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"User already confirmed\"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/users/confirm/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"confirm",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user no JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d8bf89b-e772-4f7d-aaf1-b8521d2adb55",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing json body.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user malformed JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aae59bb2-7762-4746-b8f5-d3afd170ca5e",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"The Json Body is malformed\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user missing username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f376d93-fd41-46e3-ab73-595cde6175b4",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is true\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing keys ['username'].\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user with username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e10688e6-53e0-43de-b9c6-1e2fdab08e4b",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"",
									"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
									"",
									"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
									"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user with email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef228ced-b948-4beb-a04c-40c1efbc08f7",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"",
									"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
									"",
									"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
									"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh user token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da2f2db3-b810-40f5-8732-a45e5f0dc689",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"",
									"pm.collectionVariables.set(\"user_access_token\", response.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/refresh",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03880fb4-1c4c-41cc-8fc3-1d55b6bdae39",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2b7ab20b-c5a1-4b8c-a4c2-a9f501f9a02c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get all users missing auth header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37b58aa3-2003-4255-b4a6-16a0ec509fb5",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"tests[\"JSON return code is 401\"] = response.code == 401",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing Authorization Header\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users expired auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1683f7f0-a248-497c-b18a-dd1adc6ac0f5",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"tests[\"JSON return code is 401\"] = response.code == 401",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"The access token has expired\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expired_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "928cf7ee-dd14-459e-a299-a2e31ebbea4d",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON array is not empty\"] = response.length != 0"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d05304d2-c671-49dd-adc6-2a0cd7d7cbc4",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"user_email = pm.collectionVariables.get(\"user_email\");",
									"user_username = pm.collectionVariables.get(\"user_username\");",
									"",
									"tests[\"Is email correct\"] = response.email == user_email",
									"tests[\"Is username correct\"] = response.username == user_username",
									"tests[\"Are tags present\"] = response.tags.length == 0",
									"",
									"pm.collectionVariables.set(\"user_id\", response.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_username}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "157d53ec-3d71-453e-90bc-172e1d7d3531",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"user_email = pm.collectionVariables.get(\"user_email\");",
									"user_username = pm.collectionVariables.get(\"user_username\");",
									"",
									"tests[\"Is email correct\"] = response.email == user_email",
									"tests[\"Is username correct\"] = response.username == user_username"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get online users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50e7dc59-141e-4e61-bdab-cca8a83ef81e",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// user_id = pm.collectionVariables.get(\"user_id\");",
									"",
									"// tests[\"User id is correct\"] = response[0].id == user_id"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/online",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"online"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Complete profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0f4bed4-f29c-46ff-a16b-66db85d46a87",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"Profile completed !\"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"orientation\": \"{{user_orientation}}\",\n\t\"bio\": \"{{user_bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{user_gender}}\",\n\t\"birthdate\": {{user_birthdate}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/profile/complete",
							"host": [
								"{{host}}"
							],
							"path": [
								"profile",
								"complete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login after profile completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3bcacc7-f9f6-42ad-8590-2022cfae9c6f",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true",
									"",
									"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 1",
									"",
									"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
									"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user after completed profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2383f4d3-633d-40e9-a730-e39d9d24f1e5",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"user_email = pm.collectionVariables.get(\"user_email\");",
									"user_username = pm.collectionVariables.get(\"user_username\");",
									"user_orientation = pm.collectionVariables.get(\"user_orientation\");",
									"user_gender = pm.collectionVariables.get(\"user_gender\");",
									"",
									"tests[\"Is email correct\"] = response.email == user_email",
									"tests[\"Is username correct\"] = response.username == user_username",
									"tests[\"Are tags present\"] = response.tags.length == 7",
									"tests[\"User orientation is correct\"] = response.orientation == user_orientation",
									"tests[\"User gender is correct\"] = response.gender == user_gender",
									"pm.collectionVariables.set(\"user_id\", response.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_username}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8ff8a3b1-9b9c-4cb7-a9dd-c29eee539368",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f6ddbcb3-6fd6-4ef6-85a8-d176cd5f75b2",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"tests[\"success is true\"] = response.success == true",
									"tests[\"Message is correct\"] = response.message == \"User successfully modified !\"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"orientation\": \"heterosexual\",\n\t\"bio\": \"{{user_bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"male\",\n\t\"birthdate\": {{user_birthdate}},\n\t\"first_name\": \"Foo\",\n\t\"last_name\": \"Bar\",\n\t\"username\": \"FooBar\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/profile/edit",
							"host": [
								"{{host}}"
							],
							"path": [
								"profile",
								"edit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user after edited profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f13dea7-7c67-41ec-97ca-14ed10444b09",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"user_email = pm.collectionVariables.get(\"user_email\");",
									"user_orientation = pm.collectionVariables.get(\"user_orientation\");",
									"",
									"tests[\"Is email correct\"] = response.email == user_email",
									"tests[\"Is username correct\"] = response.username == \"FooBar\"",
									"tests[\"Are tags present\"] = response.tags.length == 7",
									"tests[\"User orientation is correct\"] = response.orientation == user_orientation",
									"tests[\"User gender is correct\"] = response.gender == \"male\"",
									"pm.collectionVariables.set(\"user_id\", response.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_email}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete user after tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ab5c7873-b122-4d66-bb53-d200ee5511cc",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "debug-auth-token",
						"value": "{{debug_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/debug/users/{{user_email}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"debug",
						"users",
						"{{user_email}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DEBUG redis view all keys",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/debug/redis",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"debug",
						"redis"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{user_access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2cc3d134-eb34-4730-8210-2065800a7560",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "86a65fc9-d3fe-4c9c-bcb4-e0a093425b33",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ee3529e9-cdd6-4308-8a1d-0edef6fca8e1",
			"key": "host",
			"value": "http://127.0.0.1:5000",
			"type": "string"
		},
		{
			"id": "a5f28010-fcaa-45b8-854a-818903317da6",
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"id": "e5433b0f-60e3-4167-9312-bf9ec4962983",
			"key": "user_email",
			"value": "foo@example.org",
			"type": "string"
		},
		{
			"id": "7a18a68c-3244-4dd6-9a7d-3c309bb176f5",
			"key": "user_username",
			"value": "bar",
			"type": "string"
		},
		{
			"id": "0cedfada-9756-439c-9c47-5f26be9b4cb3",
			"key": "user_password",
			"value": "admin",
			"type": "string"
		},
		{
			"id": "99d5eccf-e07f-40e5-8d6d-fd43c448eb9f",
			"key": "user_firstname",
			"value": "Foo",
			"type": "string"
		},
		{
			"id": "2c8e556b-46ba-4a99-b47e-a8d320a6f682",
			"key": "user_lastname",
			"value": "Bar",
			"type": "string"
		},
		{
			"id": "32314549-41a0-4aa7-ae5b-3568c4aa9cc0",
			"key": "debug_token",
			"value": "xX69jules69Xx",
			"type": "string"
		},
		{
			"id": "44809d49-7682-44e4-90a2-e17de7a8a95e",
			"key": "user_access_token",
			"value": "",
			"type": "string"
		},
		{
			"id": "8b42b046-2f60-4e87-a49d-d79206d3001f",
			"key": "user_refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"id": "591d0ce5-469b-4b46-9600-ddf097e7fd50",
			"key": "expired_token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTAyNDIyNjQsIm5iZiI6MTU5MDI0MjI2NCwianRpIjoiNTM0ZGI5NzQtOWE4Ni00MGViLWE1NDEtMDg3N2ZmNzQ3NDVhIiwiZXhwIjoxNTkwMjQyMzI0LCJpZGVudGl0eSI6eyJpZCI6NTEyLCJlbWFpbCI6ImZvb0BleGFtcGxlLm9yZyIsInVzZXJuYW1lIjoiYmFyIiwiaXNfb25saW5lIjp0cnVlLCJkYXRlX2xhc3RzZWVuIjoiU2F0LCAyMyBNYXkgMjAyMCAxMzo1Nzo0NCBHTVQifSwiZnJlc2giOnRydWUsInR5cGUiOiJhY2Nlc3MifQ.NTp2P0WNkXDwzuzrcNIQdeAfizQ57HQgkzBLSvY1yHU",
			"type": "string"
		},
		{
			"id": "b0b34788-e107-4efe-ad31-a873640c2f31",
			"key": "user_orientation",
			"value": "heterosexual",
			"type": "string"
		},
		{
			"id": "1e8dcc93-4687-4f75-9ebc-7db3bac516b8",
			"key": "user_bio",
			"value": "Lorem Ipsum is the single greatest threat. We are not - we are not keeping up with other websites. Lorem Ipsum best not make any more threats to your website. It will be met with fire and fury like the world has never seen. Does everybody know that pig named Lorem Ipsum? An ‘extremely credible source’ has called my office and told me that Barack Obama’s placeholder text is a fraud.",
			"type": "string"
		},
		{
			"id": "9465dc19-d5ad-4392-ab87-6ae12e29a907",
			"key": "user_gender",
			"value": "other",
			"type": "string"
		},
		{
			"id": "e1770e73-72f5-4e3d-92d8-4b2584b68ba3",
			"key": "user_birthdate",
			"value": "1590674628",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}
{
	"info": {
		"_postman_id": "cd9c53a6-6777-4783-8fb8-8fda5cb1076b",
		"name": "PyMatcha",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Create user",
					"item": [
						{
							"name": "Create user no JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7226bb96-fed4-46af-abf0-6f553afbf4c8",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing json body.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user malformed JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ef6e46e-a7bc-4bcb-8bed-bccbd0c2cbd0",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The Json Body is malformed.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user missing key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3724394f-4ad9-4f6d-9549-da10e7f4e97d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing keys ['username', 'first_name', 'last_name'].\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user too many keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b3b6385-9a2e-4119-86e4-a78b3869e534",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"You can't specify key 'role'.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\",\n\t\"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa69360-081a-44eb-b8c8-1b2ca0f4d4a3",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user email already taken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6e41d49-5c35-4eee-be6b-804c59a174b6",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 409",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"ConflictError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "968f2d76-6eb6-4d94-a1af-65970cb22e75",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "debug-auth-token",
										"value": "{{debug_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user not existant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa815067-aa86-4508-a0e3-8b5266b77628",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "debug-auth-token",
										"value": "{{debug_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82b92424-26e7-4749-a395-425a808b2619",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"email\": \"{{user_email}}\",\n\t\"password\": \"{{user_password}}\",\n\t\"first_name\": \"{{user_firstname}}\",\n\t\"last_name\": \"{{user_lastname}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Confirm User",
					"item": [
						{
							"name": "Login user without confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e1f6f0d-1543-45be-9179-cf28a7ebdf7c",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"JSON return code is 401\"] = response.code == 401",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User needs to be confirmed first.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"password\": \"{{user_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm user without debug token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "243aa166-2388-47da-b7bb-0ebb05ce7a95",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"JSON return code is 401\"] = response.code == 401",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing debug auth token.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/debug/users/confirm/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm user unknow user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cb20543-a88b-4b05-a4c0-10f7ec349559",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User -1 not found\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e359e1fd-7d20-45d1-9013-a741bf288e5f",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User successfully confirmed.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm user already confirmed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "624481da-a265-455f-8ad8-0dca1e8b78be",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User already confirmed.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"{{user_email}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Login user",
					"item": [
						{
							"name": "Login user no JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db6a7483-97dc-414f-a512-4eb547f21b02",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing json body.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user malformed JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d329fe6-964e-47fb-87b5-f9bed9c2977e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The Json Body is malformed.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user missing username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0268e82-1003-4a6a-a716-ea1ce0f8f592",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Missing keys ['username'].\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{user_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user with username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bca9822-3dcf-4a2f-b3ed-f6186dc811da",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{user_username}}\",\n\t\"password\": \"{{user_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user with email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2de69f45-d219-4b27-af87-0efbcab66a1c",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6c55c60-5fd5-4c8b-a1e1-867c4febdb6d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/refresh",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "Revoke access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58e50c12-d495-4c9e-9a3a-dfcf7d380594",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Code is correct\"] = response.code == 200",
											"tests[\"Succes is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Access token revoked\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/access_revoke",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"access_revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all users after token revoked",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60f27d7c-6390-4800-a842-23031ba2b767",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"msg is correct\"] = response.msg == \"Token has been revoked\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc41b79a-8037-4ceb-b046-fc7c0a79a4f9",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/refresh",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all users after refreshed access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ccc8346-373c-437d-9eb5-6e24c3603563",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON array is not empty\"] = response.length != 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ad1d75b-c3dc-4bf7-94c8-2105105076d8",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Code is correct\"] = response.code == 200",
											"tests[\"Succes is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Access token revoked\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/access_revoke",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"access_revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb7a1e32-364e-4ffa-9fdd-e50ad8d78e6e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Code is correct\"] = response.code == 200",
											"tests[\"Succes is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Refresh token revoked\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/auth/refresh_revoke",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"refresh_revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh token after revoked",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df7ee51e-6a68-48c4-8a62-03b403d34a0d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"tests[\"msg is correct\"] = response.msg == \"Token has been revoked\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/refresh",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user after logout tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72b0b2d1-d6f2-42db-80d8-9d3bcae0622b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 0",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a064c1e1-1813-4dc5-ba8f-b86afadab55b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8ca54e9f-9257-40cf-b387-156182e02e7b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get all users missing auth header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3acaa85-35ac-4c66-9e10-ae9be790fc40",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"tests[\"JSON return code is 401\"] = response.code == 401",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Missing Authorization Header\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users expired auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4bafd94f-e3ed-44c8-b74f-63d5ccfa6168",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"tests[\"JSON return code is 401\"] = response.code == 401",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"The access token has expired\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"UnauthorizedError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expired_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "026f3434-14d9-43ee-9e6f-81e81934e63d",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON array is not empty\"] = response.length != 0"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6c0e32d-93be-4bc2-a920-fe3345aeef27",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"user_email = pm.collectionVariables.get(\"user_email\");",
									"user_username = pm.collectionVariables.get(\"user_username\");",
									"",
									"tests[\"Is email correct\"] = response.email == user_email",
									"tests[\"Is username correct\"] = response.username == user_username",
									"tests[\"Are tags present\"] = response.tags.length == 0",
									"",
									"pm.collectionVariables.set(\"user_id\", response.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_username}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a0e7848-efd8-453f-8292-6bac4e68b002",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"user_email = pm.collectionVariables.get(\"user_email\");",
									"user_username = pm.collectionVariables.get(\"user_username\");",
									"",
									"tests[\"Is email correct\"] = response.email == user_email",
									"tests[\"Is username correct\"] = response.username == user_username"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get online users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd379f12-d745-4bf6-8fe8-7678927105fd",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// user_id = pm.collectionVariables.get(\"user_id\");",
									"",
									"// tests[\"User id is correct\"] = response[0].id == user_id"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/online",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"online"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Complete profile",
					"item": [
						{
							"name": "Complete profile wrong birthdatre format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55f8bfaa-fabf-40d6-b8ea-8142ba6e8822",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Birthdate format must be %d/%m/%Y (day/month/year)\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{user_orientation}}\",\n\t\"bio\": \"{{user_bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{user_gender}}\",\n\t\"birthdate\": \"06 04 1998\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete profile bio too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2888978-e13b-4094-8f2f-7593ee52f94a",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Bio is too short.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{user_orientation}}\",\n\t\"bio\": \"Bonjour\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{user_gender}}\",\n\t\"birthdate\": \"{{user_birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete profile not enough tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71b1e120-487f-4a44-aa8e-21f66d6ecb81",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"At least 3 tags are required.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{user_orientation}}\",\n\t\"bio\": \"{{user_bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\"\n\t\t],\n\t\"gender\": \"{{user_gender}}\",\n\t\"birthdate\": \"{{user_birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete profile duplicated tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9433d10-833b-41bb-ac01-0c00d2a595d7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Duplicate tags.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{user_orientation}}\",\n\t\"bio\": \"{{user_bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{user_gender}}\",\n\t\"birthdate\": \"{{user_birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete profile too young",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fcef2ad-92f3-4afa-b574-25755f34240a",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"You must be 18 years old or older.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{user_orientation}}\",\n\t\"bio\": \"{{user_bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{user_gender}}\",\n\t\"birthdate\": \"06/04/2020\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b26ccaf-56b4-44a2-8fb6-696c48a20366",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Profile completed !\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{user_orientation}}\",\n\t\"bio\": \"{{user_bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{user_gender}}\",\n\t\"birthdate\": \"{{user_birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login after profile completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd53670-ed27-4ec4-8149-630de0230696",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 0\"] = response.return.is_profile_completed == 1",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after completed profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac5e8351-1b6f-4b86-a244-e7b6402a493c",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_email = pm.collectionVariables.get(\"user_email\");",
											"user_username = pm.collectionVariables.get(\"user_username\");",
											"user_orientation = pm.collectionVariables.get(\"user_orientation\");",
											"user_gender = pm.collectionVariables.get(\"user_gender\");",
											"",
											"tests[\"Is email correct\"] = response.email == user_email",
											"tests[\"Is username correct\"] = response.username == user_username",
											"tests[\"Are tags present\"] = response.tags.length == 7",
											"tests[\"User orientation is correct\"] = response.orientation == user_orientation",
											"tests[\"User gender is correct\"] = response.gender == user_gender",
											"pm.collectionVariables.set(\"user_id\", response.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete already completed profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57b6f5ae-62af-4dfc-94a7-322836733530",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The user has already completed his profile\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"{{user_orientation}}\",\n\t\"bio\": \"{{user_bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"{{user_gender}}\",\n\t\"birthdate\": \"{{user_birthdate}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/complete",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"complete"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Edit profile",
					"item": [
						{
							"name": "Edit profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e7a56291-7080-4383-9d82-41d9cea9eca2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4b8f0e3c-082f-43d9-a2c9-0f37bf7619f6",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User successfully modified !\"",
											"",
											"pm.collectionVariables.set(\"user_username\", \"FooBar\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"orientation\": \"homosexual\",\n\t\"bio\": \"{{user_bio}}\",\n\t\"tags\": [\n\t\t\"bot\",\n\t\t\"robot\",\n\t\t\"postman\",\n\t\t\"sex\",\n\t\t\"friends\",\n\t\t\"drink\",\n\t\t\"smoke\"\n\t\t],\n\t\"gender\": \"male\",\n\t\"birthdate\": \"{{user_birthdate}}\",\n\t\"first_name\": \"Foo\",\n\t\"last_name\": \"Bar\",\n\t\"username\": \"FooBar\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acdf2f6b-c785-428a-9f1d-6b8741c3d533",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_email = pm.collectionVariables.get(\"user_email\");",
											"",
											"tests[\"Is email correct\"] = response.email == user_email",
											"tests[\"Is username correct\"] = response.username == \"FooBar\"",
											"tests[\"Are tags present\"] = response.tags.length == 7",
											"tests[\"User orientation is correct\"] = response.orientation == \"homosexual\"",
											"tests[\"User gender is correct\"] = response.gender == \"male\"",
											"pm.collectionVariables.set(\"user_id\", response.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fc3acc4-2ee3-47bb-86e4-ec223fb2eefe",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Email sent for new email\"",
											"pm.collectionVariables.set(\"user_email\", \"bar@example.org\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"bar@example.org\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/email",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after edited email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34926def-5e3e-481f-8838-8f3f472394b5",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_email = pm.collectionVariables.get(\"user_email\");",
											"",
											"tests[\"Is email correct\"] = response.email == \"bar@example.org\"",
											"tests[\"Is username correct\"] = response.username == \"FooBar\"",
											"tests[\"Are tags present\"] = response.tags.length == 7",
											"tests[\"User orientation is correct\"] = response.orientation == \"homosexual\"",
											"tests[\"User gender is correct\"] = response.gender == \"male\"",
											"tests[\"Is confirmed == 0\"] = response.is_confirmed == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm user after email edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3460a7b-1a97-44fc-9014-e1696387d7f6",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User successfully confirmed.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/confirm/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"confirm",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after email edit and confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b322ea3d-9813-4043-b605-772c75d5a7a5",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"user_email = pm.collectionVariables.get(\"user_email\");",
											"",
											"tests[\"Is email correct\"] = response.email == \"bar@example.org\"",
											"tests[\"Is username correct\"] = response.username == \"FooBar\"",
											"tests[\"Are tags present\"] = response.tags.length == 7",
											"tests[\"User orientation is correct\"] = response.orientation == \"homosexual\"",
											"tests[\"User gender is correct\"] = response.gender == \"male\"",
											"tests[\"Is confirmed == 0\"] = response.is_confirmed == 1"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit email with same email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f42076cb-5623-4231-8f2f-1dbdf516d45c",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"The new email is the same as the old one !\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"bar@example.org\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/email",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb321e6b-d9ae-41bc-8cbb-b4490ec96e7c",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"User password successfully updated.\"",
											"pm.collectionVariables.set(\"user_password\", \"dolphin2\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"old_password\": \"{{user_password}}\",\n\t\"new_password\": \"dolphin2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/password",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login user after password edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1f9e123-ecd7-40bb-a7c1-763da284fb30",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Is profile completed is 1\"] = response.return.is_profile_completed == 1",
											"",
											"pm.collectionVariables.set(\"user_access_token\", response.return.access_token);",
											"pm.collectionVariables.set(\"user_refresh_token\", response.return.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{user_password}}\",\n\t\"username\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit geolocation with ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8451a683-bbb8-471b-9698-cbb0172c60f3",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"New location sucessfully saved.\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ip\": \"{{user_ip}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/geolocation",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"geolocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after ip geoloc edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44e9d455-5c4e-4d87-8d50-c22bc3ef311c",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Is geohash correct\"] = response.geohash == \"spb8kg12wgw3\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit geolocation with lat lng",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1632e1f-a141-4fc0-96fe-67645a2bb5ae",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"New location sucessfully saved.\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ip\": \"{{user_ip}}\",\n\t\"lat\": {{user_lat}},\n\t\"lng\": {{user_lng}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/edit/geolocation",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"edit",
										"geolocation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user after lat lng edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c6e3742-260f-436a-8a94-77fdf64e78ba",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Is geohash correct\"] = response.geohash == \"ezzx4fcq327u\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "View profile",
					"item": [
						{
							"name": "Get profile views before views",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93fc698e-bd95-46b6-8eeb-a0bead365c62",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"View count\"] = response.views.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/views",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"views"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create random views",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfc5ef58-509d-4545-959f-cc8121093a8f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "159f2ec0-bba7-45c3-9ca6-476ce3a09419",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"value": "xX69jules69Xx",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/debug/views/78",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"views",
										"78"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get profile views",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cee2d93-a7d2-4514-96fb-ed63d3c2afa9",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"View count\"] = response.views.length == 78"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/views",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"views"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Report profile",
					"item": [
						{
							"name": "Get user no reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e12b46f4-fb8e-47c2-a7fd-19a05718949f",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"reports_received count\"] = response.reports_received.length == 0",
											"tests[\"reports_sent count\"] = response.reports_sent.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "debug-auth-token",
										"value": "{{debug_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reason\": \"bot\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/debug/reports/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"reports",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user no reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3638290-9085-4cf8-8a1d-e688d0ab2e95",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"One report has been sent\"] = response.reports.sent.length == 0",
											"tests[\"No report has been received\"] = response.reports.received.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DEBUG Report +1 profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdfeccd3-688c-400b-ada1-07acc854ee28",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"value": "{{debug_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reporter_id\": {{user_id}},\n\t\"reported_id\": 1,\n\t\"reason\": \"bot\",\n\t\"details\": \"He's a bot !\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/debug/reports",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"reports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user 1 report sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce8faea0-1b57-4914-9c66-3b701c440d1e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"reports_received count\"] = response.reports_received.length == 0",
											"tests[\"reports_sent count\"] = response.reports_sent.length == 1"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reason\": \"bot\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/debug/reports/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"reports",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user 1 report sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9622f30-33b1-4052-bb68-e822fcfa2474",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"One report has been sent\"] = response.reports.sent.length == 1",
											"tests[\"No report has been received\"] = response.reports.received.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Report profile bad reason",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e3ad4b4-6d9e-4294-ba6c-79e281f10d73",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Reason must be 'harassment', 'bot', 'spam' or 'inappropriate content'\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reason\": \"bad reason\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Report profile user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bffa1e7a-253b-4522-b5aa-01a48c38900d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User -1 not found.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reason\": \"bot\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user to report",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b58e049-52e4-48bd-a9ff-1fc9f7cc7312",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"report_me\",\n\t\"email\": \"report_me@example.org\",\n\t\"password\": \"dolphin\",\n\t\"first_name\": \"Report\",\n\t\"last_name\": \"Me\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Report user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c8f08ff-cc4e-44c9-8c9b-42830209b611",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"tests[\"Message is correct\"] = response.message == \"Report created on user report_me@example.org.\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reason\": \"bot\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/report_me@example.org",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"report_me@example.org"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one user 2 reports sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7128a012-53cc-4b6e-a684-ebf343fcc233",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"One report has been sent\"] = response.reports.sent.length == 2",
											"tests[\"No report has been received\"] = response.reports.received.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{user_email}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get report_me user to check reports received",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96fb67f5-2097-4775-b6ae-46d9d06dcf10",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"One report has been sent\"] = response.reports.sent.length == 0",
											"tests[\"No report has been received\"] = response.reports.received.length == 1"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/report_me@example.org",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"report_me@example.org"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user report_me",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7665328a-6b89-47b5-bb8b-1d7dc59717aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "debug-auth-token",
										"type": "text",
										"value": "{{debug_token}}"
									}
								],
								"url": {
									"raw": "{{host}}/debug/users/report_me@example.org",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"users",
										"report_me@example.org"
									]
								}
							},
							"response": []
						},
						{
							"name": "Report yourself",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06d068dc-7890-4aab-a0dc-187f1dd6d2f2",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is true\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Cannot report yourself.\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"reason\": \"bot\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/profile/report/{{user_email}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"report",
										"{{user_email}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Images",
					"item": [
						{
							"name": "Get no image",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb39c245-0cd4-4e97-b9e0-73220c1bbe6d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"No images are returned\"] = response.images.length == 0"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/images",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify unknow image",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b35119ce-4327-406f-a225-faa5963c6cc5",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Image not found for user 2\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/images/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"images",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete unknow image",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df71bd73-7300-4d9c-995f-374e6eb3594d",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Image not found for user 2\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/images/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"images",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "No form data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ed3ecf7-b928-433b-8b33-d9d5711d15d9",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"No file body passed in request form data\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/profile/images?is_primary=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"images"
									],
									"query": [
										{
											"key": "is_primary",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "No filename passed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "796e34f1-1865-44a6-94b2-952bac223588",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"No file body passed in request form data\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file[]",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{host}}/profile/images?is_primary=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"profile",
										"images"
									],
									"query": [
										{
											"key": "is_primary",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Like",
			"item": [
				{
					"name": "Like user",
					"item": [
						{
							"name": "Like non existant user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64ceba7c-3320-487d-8172-d269deacb423",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User -1 not found.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"is_superlike\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/like/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"like",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Like youself",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eede206e-a385-468d-b6eb-e86bd8ee99b1",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Cannot like yourself.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"is_superlike\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/like/{{user_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"like",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user to like",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e5c7083-68ba-4a09-ab1f-e7f9a1f3890a",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"like_me\",\n\t\"email\": \"like_me@example.org\",\n\t\"password\": \"dolphin\",\n\t\"first_name\": \"Like\",\n\t\"last_name\": \"Me\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Like like_me user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a0d20ee-01b5-4841-9430-21d65fb818fc",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Messag is correct\"] = response.message == \"Liked user.\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"is_superlike\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/like/like_me",
									"host": [
										"{{host}}"
									],
									"path": [
										"like",
										"like_me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Like already liked user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76d7aca6-3b00-42c5-b7ea-cf2f40fc8702",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"You already liked this person.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"is_superlike\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/like/like_me",
									"host": [
										"{{host}}"
									],
									"path": [
										"like",
										"like_me"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Unlike user",
					"item": [
						{
							"name": "Unlike non existant user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2feb111b-8a03-406f-bdba-e9eeb8a36f12",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"tests[\"JSON return code is 404\"] = response.code == 404",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"User -1 not found.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/unlike/-1",
									"host": [
										"{{host}}"
									],
									"path": [
										"unlike",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unlike youself",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ad8fb90-1a96-4554-b92b-2fa5566f2b87",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"Message is correct\"] = response.error.message == \"Cannot unlike yourself.\"",
											"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/unlike/{{user_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"unlike",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unlike like_me user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbac846a-f157-450d-9b47-7a661d9d4367",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/unlike/like_me",
									"host": [
										"{{host}}"
									],
									"path": [
										"unlike",
										"like_me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unlike already unliked user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f078213-7986-4330-b095-31119ade01e3",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"tests[\"JSON return code is 400\"] = response.code == 400",
											"",
											"tests[\"success is false\"] = response.success == false",
											"tests[\"message is ok\"] = response.error.message == \"You never liked this person in the first place.\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/unlike/like_me",
									"host": [
										"{{host}}"
									],
									"path": [
										"unlike",
										"like_me"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Superlike User",
					"item": [
						{
							"name": "Superlike like_me user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e2097f2-51a2-4324-bb32-24241f52854a",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"tests[\"Messag is correct\"] = response.message == \"Superliked user.\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"is_superlike\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/like/like_me",
									"host": [
										"{{host}}"
									],
									"path": [
										"like",
										"like_me"
									]
								}
							},
							"response": []
						},
						{
							"name": "UnSuperlike like_me user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05e777d7-480a-4e17-b403-452ff77875e8",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/unlike/like_me",
									"host": [
										"{{host}}"
									],
									"path": [
										"unlike",
										"like_me"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Match user",
					"item": [
						{
							"name": "Create fake like",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "debug-auth-token",
										"value": "{{debug_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"liker_uid\": \"like_me\",\n    \"liked_uid\": \"{{user_username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/debug/like",
									"host": [
										"{{host}}"
									],
									"path": [
										"debug",
										"like"
									]
								}
							},
							"response": []
						},
						{
							"name": "Like like_me user match",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83f79b8a-eda1-4fd1-a171-908bf0476bca",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"JSON return code is 200\"] = response.code == 200",
											"",
											"tests[\"success is true\"] = response.success == true",
											"",
											"",
											"tests[\"Message is correct\"] = response.message == \"It's a match !\"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"is_superlike\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/like/like_me",
									"host": [
										"{{host}}"
									],
									"path": [
										"like",
										"like_me"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete user like_me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "584814f1-ca11-4913-b8f7-b2d37f65c185",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/users/like_me@example.org",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"like_me@example.org"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sent and received likes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "046898d1-15b2-4ac1-8c35-d0acccd017b6",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"tests[\"Received likes != 0\"] = response.likes.received.length != 0",
									"tests[\"Sent likes != 0\"] = response.likes.sent.length != 0"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/likes",
							"host": [
								"{{host}}"
							],
							"path": [
								"likes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user matches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30b22148-6e25-4b09-a2c7-05dfdde24e80",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"tests[\"Matches length != 0\"] = response.matches.length != 0",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/matches",
							"host": [
								"{{host}}"
							],
							"path": [
								"matches"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "Get no conversations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e1c41be-e773-478f-b337-d042f2f51c20",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Conversations are empty\"] = response.conversations.length == 0"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/conversations",
							"host": [
								"{{host}}"
							],
							"path": [
								"conversations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send message to unknow user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b77d499-14ff-49d3-8956-2041b8a96263",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Recipient -1 not found.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_uid\": \"-1\",\n    \"content\": \"Hello!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/messages/send",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send message to self",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b4917c1-41c4-4e91-9774-7e74c8ea8bea",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Cannot send a message to yourself.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_uid\": \"{{user_id}}\",\n    \"content\": \"Hello World !\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/messages/send",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user to message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44c280bf-1951-4132-a09a-e4bf1bc8270f",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"message_me\",\n\t\"email\": \"message_me@example.org\",\n\t\"password\": \"dolphin2\",\n\t\"first_name\": \"Message\",\n\t\"last_name\": \"Me\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send message to message_me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "490b9539-6a2d-4072-b9a1-4ececd2240ac",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.message == \"Message successfully sent to message_me.\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_uid\": \"message_me\",\n    \"content\": \"Hello World !\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/messages/send",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get conversations after message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ce977a3-3e80-4bcf-8b9f-554282a5c9f1",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Conversations is empty\"] = response.conversations.length == 1",
									"tests[\"Message is not unseen because you send the message so it's not notified\"] = response.conversations[0].is_unseen == false",
									"tests[\"Message content is correct\"] = response.conversations[0].last_message_content == \"Hello World !\"",
									"tests[\"With user is correct\"] = response.conversations[0].with_user.username == \"message_me\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/conversations",
							"host": [
								"{{host}}"
							],
							"path": [
								"conversations"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug message from message_me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f24e12d8-6e0e-4c07-ab43-7d573c073ba4",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"value": "{{debug_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_uid\": \"message_me\",\n    \"to_uid\": \"{{user_id}}\",\n    \"content\": \"My Reply\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/debug/messages/send",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"messages",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get conversations after reply",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79e588ac-f8b6-4edf-8fab-44caf52e62f0",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Conversations is empty\"] = response.conversations.length == 1",
									"tests[\"Message is unseen because you received the message\"] = response.conversations[0].is_unseen == true",
									"tests[\"Message content is correct\"] = response.conversations[0].last_message_content == \"My Reply\"",
									"tests[\"With user is correct\"] = response.conversations[0].with_user.username == \"message_me\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/conversations",
							"host": [
								"{{host}}"
							],
							"path": [
								"conversations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unseen messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ee2facd-e7e8-4a76-8df6-445fb671971d",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.new_messages.length == 1",
									"tests[\"New message content is correct\"] = response.new_messages[0].content == \"My Reply\"",
									"tests[\"New message is_seen\"] = response.new_messages[0].is_seen == 0",
									"tests[\"New message seen timestamp is null\"] = response.new_messages[0].seen_timestamp == null"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/unseen",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"unseen"
							]
						}
					},
					"response": []
				},
				{
					"name": "See unknown user messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5d39d14-9978-4adf-aeda-0ac9e3aa14e9",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"With user -1 not found.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_uid\": \"message_me\",\n    \"to_uid\": \"{{user_id}}\",\n    \"content\": \"My Reply\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/messages/see/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"see",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "See messages from message_me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0cbdf9f-c46e-4335-bd85-dd5bce938066",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.message == \"Messages marked as seen.\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_uid\": \"message_me\",\n    \"to_uid\": \"{{user_id}}\",\n    \"content\": \"My Reply\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/messages/see/message_me",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"see",
								"message_me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get conversations after seeing messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4bda20dc-16c6-4779-9feb-66070de24040",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Conversations is empty\"] = response.conversations.length == 1",
									"tests[\"Message is unseen because you received the message\"] = response.conversations[0].is_unseen == false",
									"tests[\"Message content is correct\"] = response.conversations[0].last_message_content == \"My Reply\"",
									"tests[\"With user is correct\"] = response.conversations[0].with_user.username == \"message_me\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/conversations",
							"host": [
								"{{host}}"
							],
							"path": [
								"conversations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unseen messages no new message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25f81c81-693f-4d85-ab7f-46e5f23d8cbb",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"No new messages\"] = response.new_messages.length == 0"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/unseen",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"unseen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like message unknow id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "777cce20-2a84-4544-b25d-371666759d27",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Message -1 not found.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/like/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"like",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user message_me2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b401254e-d8ee-4c63-a294-c92e828a1134",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"JSON return code is 200\"] = response.code == 200",
									"",
									"tests[\"success is true\"] = response.success == true"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"message_me2\",\n\t\"email\": \"message_me2@example.org\",\n\t\"password\": \"dolphin78\",\n\t\"first_name\": \"Message2\",\n\t\"last_name\": \"Me2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug message from message_me to other user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bbb3892-bbae-4a32-a398-683d12074395",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_uid\": \"message_me\",\n    \"to_uid\": \"message_me2\",\n    \"content\": \"My Reply\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/debug/messages/send",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"messages",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like message not sent to you",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "826154f9-1346-4800-95e7-9199cf4722d4",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Cannot like a message that isn't destined to you.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/like/3",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"like",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like your own message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86b2f684-df7f-4148-8825-be4898bbe83c",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Cannot like your own message.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/like/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"like",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like message_me message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea43d2a9-0106-408a-b4fa-628fe1c3e219",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.message == \"Liked message 2.\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/like/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"like",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like already liked message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe8ce0d5-e3ed-4ebc-8205-533a44abccf9",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Message is already liked.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/like/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"like",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike unknown message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dbc9c17-d0f5-412d-9d1b-926543813958",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"tests[\"JSON return code is 404\"] = response.code == 404",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Message -1 not found.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"NotFoundError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/unlike/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"unlike",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike message not sent to you",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "168a6135-5987-4a54-ab81-c0b2b33668e3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Cannot unlike a message that isn't destined to you.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/unlike/3",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"unlike",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unike your own message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6bfc438e-d1dd-49f4-a119-a89ba7ed8fe6",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Cannot unlike your own message.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/unlike/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"unlike",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike message_me message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84082f12-b96f-441e-8189-cf1c48e1838b",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.message == \"Unliked message 2.\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/unlike/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"unlike",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike already unliked message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab5e378c-0024-4217-ab47-f39be2c2f04e",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Message is already unliked.\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/unlike/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"unlike",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like message_me message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "615d141a-48da-4acc-b69b-4aaa6e0b5b66",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.message == \"Liked message 2.\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/messages/like/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"like",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get conversation with yourself",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4dcb6d30-b63f-4875-9805-6aa250163962",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"tests[\"JSON return code is 400\"] = response.code == 400",
									"",
									"tests[\"success is false\"] = response.success == false",
									"tests[\"Message is correct\"] = response.error.message == \"Cannot get conversation with yourself. Get a life...\"",
									"tests[\"Error type is Bad Request\"] = response.error.type == \"BadRequestError\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/conversations/{{user_username}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"conversations",
								"{{user_username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get conversation with message_me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b2311ae-d72e-45c7-8e23-e3f01b73f695",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Conversations is empty\"] = response.messages.length == 2",
									"tests[\"First message content\"] = response.messages[0].content == \"Hello World !\"",
									"tests[\"Second message content\"] = response.messages[1].content == \"My Reply\"",
									"tests[\"First message is_liked\"] = response.messages[0].is_liked == false",
									"tests[\"Second message is liked\"] = response.messages[1].is_liked == true",
									"tests[\"First message is seen\"] = response.messages[0].is_seen == false",
									"tests[\"Second message is seen\"] = response.messages[1].is_seen == true",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/conversations/message_me",
							"host": [
								"{{host}}"
							],
							"path": [
								"conversations",
								"message_me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send message to message_me2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c739d11-8904-4ec8-9de7-399b5f5b0ed3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Message is correct\"] = response.message == \"Message successfully sent to message_me2.\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_uid\": \"message_me2\",\n    \"content\": \"Hello World 2 !\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/messages/send",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get conversations after message to 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2dba2f4f-9b72-4909-abe2-56058f9ae0cc",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Conversations is empty\"] = response.conversations.length == 2",
									"tests[\"Message is not unseen because you send the message so it's not notified\"] = response.conversations[0].is_unseen == false",
									"tests[\"Message content is correct\"] = response.conversations[1].last_message_content == \"Hello World 2 !\"",
									"tests[\"With user is correct\"] = response.conversations[1].with_user.username == \"message_me2\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/conversations",
							"host": [
								"{{host}}"
							],
							"path": [
								"conversations"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Recommendations",
			"item": [
				{
					"name": "Start recommendation calculations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f71c222-54d4-47d2-adf7-f312572dc9d8",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "debug-auth-token",
								"value": "{{debug_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/debug/recommendations/start",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"recommendations",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user recommendations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e13fda01-b4aa-4098-99f8-f2c4aef58abe",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Recommendations aren't null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.recommendations).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/recommendations",
							"host": [
								"{{host}}"
							],
							"path": [
								"recommendations"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Reset",
			"item": [
				{
					"name": "Delete user after tests & reset variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bc97240-d08e-47aa-8d58-a968eec586b5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.collectionVariables.set(\"user_email\", \"foo@example.org\")",
									"pm.collectionVariables.set(\"user_username\", \"foo\")",
									"pm.collectionVariables.set(\"user_firstname\", \"Foo\")",
									"pm.collectionVariables.set(\"user_lastname\", \"Bar\")",
									"pm.collectionVariables.set(\"user_gender\", \"other\")",
									"pm.collectionVariables.set(\"user_orientation\", \"bisexual\")",
									"pm.collectionVariables.set(\"user_password\", \"admin\")",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/users/{{user_email}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"users",
								"{{user_email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset tables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9168c725-c298-43b5-b54d-6c647462e8b0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/tables",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"tables"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset redis",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "063699fb-fc36-4b97-a90e-cb9ff0b39bb3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "debug-auth-token",
								"type": "text",
								"value": "{{debug_token}}"
							}
						],
						"url": {
							"raw": "{{host}}/debug/redis",
							"host": [
								"{{host}}"
							],
							"path": [
								"debug",
								"redis"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "DEBUG redis view all keys",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "debug-auth-token",
						"value": "xX69jules69Xx",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/debug/redis",
					"host": [
						"{{host}}"
					],
					"path": [
						"debug",
						"redis"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{user_access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "906a4aae-0698-4eb4-8425-199af433f889",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "703f7506-5548-43c5-a4b2-1179fae75935",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "dbd5ea57-ea0b-4311-9be3-d905bcdabca4",
			"key": "host",
			"value": "http://127.0.0.1:5000"
		},
		{
			"id": "3e82ac7a-d332-442a-a8a8-d39856c7ea89",
			"key": "user_id",
			"value": ""
		},
		{
			"id": "09b1aecc-2fee-44a2-a876-447f941033e4",
			"key": "user_email",
			"value": "foo@example.org"
		},
		{
			"id": "668c4556-446c-4f3d-a7e8-ff7380a8ed26",
			"key": "user_username",
			"value": "foo"
		},
		{
			"id": "d425fd80-82fb-4a9f-b322-a00ae9e4e5d0",
			"key": "user_password",
			"value": "admin"
		},
		{
			"id": "6ad763cc-a8bf-4d22-991a-c238fc49f493",
			"key": "user_firstname",
			"value": "Foo"
		},
		{
			"id": "972637f0-7bf1-431a-9912-149f48169d62",
			"key": "user_lastname",
			"value": "Bar"
		},
		{
			"id": "d1129824-8c4e-4058-bc9b-77c1250e7842",
			"key": "debug_token",
			"value": "xX69jules69Xx"
		},
		{
			"id": "99e98331-5d4a-4a29-b221-b3265c3b7f69",
			"key": "user_access_token",
			"value": ""
		},
		{
			"id": "cf67ac74-ba7e-432f-aa37-1248340bbcdc",
			"key": "user_refresh_token",
			"value": ""
		},
		{
			"id": "d403b769-9895-48c2-ae87-2e5ca81f8a89",
			"key": "expired_token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTAyNDIyNjQsIm5iZiI6MTU5MDI0MjI2NCwianRpIjoiNTM0ZGI5NzQtOWE4Ni00MGViLWE1NDEtMDg3N2ZmNzQ3NDVhIiwiZXhwIjoxNTkwMjQyMzI0LCJpZGVudGl0eSI6eyJpZCI6NTEyLCJlbWFpbCI6ImZvb0BleGFtcGxlLm9yZyIsInVzZXJuYW1lIjoiYmFyIiwiaXNfb25saW5lIjp0cnVlLCJkYXRlX2xhc3RzZWVuIjoiU2F0LCAyMyBNYXkgMjAyMCAxMzo1Nzo0NCBHTVQifSwiZnJlc2giOnRydWUsInR5cGUiOiJhY2Nlc3MifQ.NTp2P0WNkXDwzuzrcNIQdeAfizQ57HQgkzBLSvY1yHU"
		},
		{
			"id": "1ab8729c-be33-463f-bdb8-48970d0f5e6f",
			"key": "user_orientation",
			"value": "heterosexual"
		},
		{
			"id": "0fb694c5-a37d-4888-bff8-51d394d1885f",
			"key": "user_bio",
			"value": "Lorem Ipsum is the single greatest threat. We are not - we are not keeping up with other websites. Lorem Ipsum best not make any more threats to your website. It will be met with fire and fury like the world has never seen. Does everybody know that pig named Lorem Ipsum? An ‘extremely credible source’ has called my office and told me that Barack Obama’s placeholder text is a fraud."
		},
		{
			"id": "506c11b7-28bc-40a4-8b16-bb3e4c4dfb82",
			"key": "user_gender",
			"value": "male"
		},
		{
			"id": "5af737dd-f310-4cf0-a2b4-74572b4b0b33",
			"key": "user_birthdate",
			"value": "06/04/1998"
		},
		{
			"id": "e1facd09-f9b4-4581-a2f5-ae72bebac8bf",
			"key": "user_lat",
			"value": "44.8404"
		},
		{
			"id": "c25008f0-5501-4dd8-8068-901781f1c72b",
			"key": "user_lng",
			"value": "-0.5805"
		},
		{
			"id": "bae8bc29-fdda-4426-bc70-32448fd6941d",
			"key": "user_ip",
			"value": "77.205.46.181"
		}
	],
	"protocolProfileBehavior": {}
}
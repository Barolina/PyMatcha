openapi: 3.0.0
info:
  description: "This is the Matcha API documentation"
  version: 0.0.0
  title: Matcha API
  termsOfService: https://github.com/Seluj78/PyMatcha/blob/dev/LICENSE
  contact:
    email: jlasne@student.42.fr
  license:
    name: GNU GPL 3
    url: https://github.com/Seluj78/PyMatcha/blob/dev/LICENSE

# TODO: Email and password once rewritten with new frontend
# TODO: https://swagger.io/docs/specification/links/

tags:
  - name: Authentication
    description: Login and register routes
  - name: Profile
  - name: Like
    description: Like, unlike user etc...
  - name: Match
  - name: Messages
    description: Send and receive messages
  - name: Recommendations
  - name: User
    description: Get user info
  - name: Debug
    description: Debug routes

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user to Matcha
      description: ""
      operationId: registerUser
#      security:
#        - bearerAuth: []
      requestBody:
        description: Parameters to create a user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        "200":
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: If the request is a success
                    example: true
                  code:
                    type: integer
                    description: The status code
                    example: 200
                  email:
                    type: string
                    description: The user email
                    example: foo@example.org
        "409":
          $ref: '#/components/responses/Conflict'
        "400":
          $ref: '#/components/responses/BadRequest'
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login to Matcha
      description: ""
      operationId: loginUser
#      security:
#        - bearerAuth: []
      requestBody:
        description: Parameters to login a user. Either email or username
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        "200":
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: If the request is a success
                    example: true
                  code:
                    type: integer
                    description: The status code
                    example: 200
                  return:
                    type: object
                    properties:
                      access_token:
                        type: string
                        description: The user access token to use in bearer auth
                        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDAyODM3NDAsIm5iZiI6MTYwMDI4Mzc0MCwianRpIjoiMTFlMmFhNzMtYWVkOS00NDQ2LWExNWItODAxZmFmYjYzYTdiIiwiZXhwIjoxNjAwMjg0NjQwLCJpZGVudGl0eSI6eyJpZCI6MSwiZW1haWwiOiJmb29AZXhhbXBsZS5vcmciLCJ1c2VybmFtZSI6ImZvbyIsImlzX29ubGluZSI6MCwiZGF0ZV9sYXN0c2VlbiI6IldlZCwgMTYgU2VwIDIwMjAgMTU6Mzk6MDQgR01UIn0sImZyZXNoIjp0cnVlLCJ0eXBlIjoiYWNjZXNzIn0.EFCIlsxSbEeHza_U9oPdVvvfx1rquItHDnoYtP19XBM
                      refresh_token:
                        type: string
                        description: The user refresh token usd to refresh the access token when expired
                        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDAyODM3NDAsIm5iZiI6MTYwMDI4Mzc0MCwianRpIjoiNWQ2NjYwMTQtMDJkMi00YjY4LThjOTktNDQwNDZjYzYzZDNjIiwiZXhwIjoxNjAyODc1NzQwLCJpZGVudGl0eSI6eyJpZCI6MSwiZW1haWwiOiJmb29AZXhhbXBsZS5vcmciLCJ1c2VybmFtZSI6ImZvbyIsImlzX29ubGluZSI6MCwiZGF0ZV9sYXN0c2VlbiI6IldlZCwgMTYgU2VwIDIwMjAgMTU6Mzk6MDQgR01UIn0sInR5cGUiOiJyZWZyZXNoIn0.yz1QhL1QhxUdYvvacXZ0CkkVxFp2CkcNYpYRtKdRXdo
                      is_profile_completed:
                        type: boolean
                        description: Is the user profile completed
                        example: false
        "409":
          $ref: '#/components/responses/Conflict'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refreshes the access token
      description: ""
      operationId: refreshToken
      security:
        - refreshToken: []
      responses:
        "409":
          description: Unauthorized error, token revoked.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Token has been revoked
                    default: Token has been revoked
        "200":
          description: Token successfully refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: If the request is a success
                    example: true
                  code:
                    type: integer
                    description: The status code
                    example: 200
                  access_token:
                    type: string
                    description: The new and fresh access token
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDAzMjYzMjksIm5iZiI6MTYwMDMyNjMyOSwianRpIjoiZTA0ZWQ3NmMtMTcxMC00ZjQ4LWFkNzMtZDBmOTMxZTkxNzM0IiwiZXhwIjoxNjAwMzI3MjI5LCJpZGVudGl0eSI6eyJpZCI6MSwiZW1haWwiOiJmb29AZXhhbXBsZS5vcmciLCJ1c2VybmFtZSI6ImZvbyIsImlzX29ubGluZSI6MCwiZGF0ZV9sYXN0c2VlbiI6IldlZCwgMTYgU2VwIDIwMjAgMTU6Mzk6MDQgR01UIn0sImZyZXNoIjpmYWxzZSwidHlwZSI6ImFjY2VzcyJ9.dFJMy-04thKA9Q268bgQhiqLDrkqnCOCaiwHJ1XXook
  /auth/access_revoke:
    post:
      tags:
        - Authentication
      summary: Revokes the access token
      description: ""
      operationId: revokeAccessToken
      security:
        - accessToken: [ ]
      responses:
        "409":
          description: Unauthorized error, token already revoked.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Token has been revoked
                    default: Token has been revoked
        "200":
          description: Token successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: If the request is a success
                    example: true
                  code:
                    type: integer
                    description: The status code
                    example: 200
                  message:
                    type: string
                    example: Access token revoked
  /auth/refresh_revoke:
    post:
      tags:
        - Authentication
      summary: Revokes the refresh token
      description: ""
      operationId: revokeRefreshToken
      security:
        - refreshToken: [ ]
      responses:
        "409":
          description: Unauthorized error, token already revoked.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Token has been revoked
                    default: Token has been revoked
        "200":
          description: Token successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: If the request is a success
                    example: true
                  code:
                    type: integer
                    description: The status code
                    example: 200
                  message:
                    type: string
                    example: Refresh token revoked
  /profile/complete:
    post:
      tags:
        - Profile
      summary: Complete user profile
      description: ""
      operationId: completeProfile
      security:
        - bearerAuth: []
      requestBody:
        description: Parameters to complete profile
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteProfile'
      responses:
        "409":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: Profile completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: If the request is a success
                    example: true
                  code:
                    type: integer
                    description: The status code
                    example: 200
                  message:
                    type: string
                    example: Profile completed !
  /profile/edit:
    post:
      tags:
        - Profile
      summary: Edit user profile
      description: ""
      operationId: editProfile
      security:
        - bearerAuth: []
      requestBody:
        description: Parameters to edit profile
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditProfile'
      responses:
        "409":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: Profile edited successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: If the request is a success
                    example: true
                  code:
                    type: integer
                    description: The status code
                    example: 200
                  message:
                    type: string
                    example: User successfully modified !
  /profile/report/{uid}:
    post:
      summary: Report a profile
      operationId: reportProfile
      tags:
        - Profile
      parameters:
        - name: uid
          in: path
          required: true
          description: The id of the user to report. Either username, email or id
          schema:
            type: string
      requestBody:
        description: Parameters to report profile
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportProfile'
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "200":
          description: Report created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: If the request is a success
                    example: true
                  code:
                    type: integer
                    description: The status code
                    example: 200
                  message:
                    type: string
                    example: Report created on user {email_adress}.

servers:
  - url: https://api.matcha.com


components:
  responses:
    Conflict:
      description: Conflict error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 409
                default: 409
              success:
                type: boolean
                default: false
                example: false
              error:
                type: object
                properties:
                  type:
                    type: string
                    default: ConflictError
                    example: ConflictError
                  name:
                    type: string
                    default: Conflict Error
                    example: Conflict Error
                  message:
                    type: string
                  solution:
                    type: string
    BadRequest:
      description: Bad Request error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 400
                default: 400
              success:
                type: boolean
                default: false
                example: false
              error:
                type: object
                properties:
                  type:
                    type: string
                    default: BadRequestError
                    example: BadRequestError
                  name:
                    type: string
                    default: BadRequest Error
                    example: BadRequest Error
                  message:
                    type: string
                  solution:
                    type: string
    Unauthorized:
      description: Unauthorized error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 401
                default: 401
              success:
                type: boolean
                default: false
                example: false
              error:
                type: object
                properties:
                  type:
                    type: string
                    default: UnauthorizedError
                    example: UnauthorizedError
                  name:
                    type: string
                    default: Unauthorized Error
                    example: Unauthorized Error
                  message:
                    type: string
                  solution:
                    type: string
    NotFound:
      description: Not Found error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 401
                default: 401
              success:
                type: boolean
                default: false
                example: false
              error:
                type: object
                properties:
                  type:
                    type: string
                    default: NotFoundError
                    example: NotFoundError
                  name:
                    type: string
                    default: NotFound Error
                    example: NotFound Error
                  message:
                    type: string
                  solution:
                    type: string

  securitySchemes:
    accessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
    refreshToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Refresh token
  schemas:
    CreateUser:
      type: object
      properties:
        username:
          type: string
          example: foobar
        email:
          type: string
          example: foo@example.org
        password:
          type: string
          example: dolphin2
        first_name:
          type: string
          example: Foo
        last_name:
          type: string
          example: Bar
    LoginUser:
      type: object
      properties:
        username:
          type: string
          example: foo@example.org
          required: true
        password:
          type: string
          example: dolphin2
          required: true
    CompleteProfile:
      type: object
      properties:
        gender:
          type: string
          enum: ["male", "female", "other"]
        birthdate:
          type: date
          example: 06/04/1998
          description: Formatted as DAY/MONTH/YEAR
        orientation:
          type: string
          enum: ["heterosexual", "homosexual", "bisexual", "other"]
        bio:
          type: string
          example: I like running around on horses
        tags:
          type: array
          example: ["food", "sex", "drugs"]
    EditProfile:
      type: object
      properties:
        first_name:
          type: string
          example: Foo
        last_name:
          type: string
          example: Bar
        username:
          type: string
          example: FooBar
        gender:
          type: string
          enum: ["male", "female", "other"]
        birthdate:
          type: date
          example: 06/04/1998
          description: Formatted as DAY/MONTH/YEAR
        orientation:
          type: string
          enum: ["heterosexual", "homosexual", "bisexual", "other"]
        bio:
          type: string
          example: I like running around on horses
        tags:
          type: array
          example: ["food", "sex", "drugs"]
    ReportProfile:
      type: object
      properties:
        reason:
          type: string
          enum: ["harassment", "bot", "spam", "inappropriate content"]
        details:
          type: string
          example: He spammed me of dick pics
